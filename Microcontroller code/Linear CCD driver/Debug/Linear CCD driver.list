
Linear CCD driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800931c  0800931c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009324  08009324  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800932c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cd4  200000fc  08009428  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd0  08009428  00024dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015199  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003415  00000000  00000000  000352c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  000386e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e8  00000000  00000000  0003aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001693b  00000000  00000000  00054ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab18  00000000  00000000  0006b92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  00106494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080092a4 	.word	0x080092a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080092a4 	.word	0x080092a4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd66 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f838 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fb18 	bl	8000b18 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 faf6 	bl	8000ad8 <MX_DMA_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8f0 	bl	80006d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f0:	f000 f964 	bl	80007bc <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f4:	f000 f9d8 	bl	80008a8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004f8:	f000 fa60 	bl	80009bc <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f008 f98c 	bl	8008818 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000500:	f000 f894 	bl	800062c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA6 - fM
 8000504:	2100      	movs	r1, #0
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x64>)
 8000508:	f003 ff2a 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 800050c:	210c      	movs	r1, #12
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x68>)
 8000510:	f003 ff26 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2); //PA2 - SH
 8000514:	2104      	movs	r1, #4
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x6c>)
 8000518:	f003 ff22 	bl	8004360 <HAL_TIM_PWM_Start>
//  HAL_Delay(30);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0 - ICG
 800051c:	2100      	movs	r1, #0
 800051e:	480a      	ldr	r0, [pc, #40]	; (8000548 <main+0x70>)
 8000520:	f003 ff1e 	bl	8004360 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim5, -10);
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <main+0x6c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f06f 0209 	mvn.w	r2, #9
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
 800052e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000532:	4906      	ldr	r1, [pc, #24]	; (800054c <main+0x74>)
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x78>)
 8000536:	f000 fe13 	bl	8001160 <HAL_ADC_Start_DMA>
 800053a:	e7f8      	b.n	800052e <main+0x56>
 800053c:	20000208 	.word	0x20000208
 8000540:	20000250 	.word	0x20000250
 8000544:	20000298 	.word	0x20000298
 8000548:	200001c0 	.word	0x200001c0
 800054c:	200002e0 	.word	0x200002e0
 8000550:	20000118 	.word	0x20000118

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f008 fe96 	bl	8009294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005c8:	2319      	movs	r3, #25
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f9e6 	bl	80039b0 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ea:	f000 fadb 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fc48 	bl	8003ea0 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000616:	f000 fac5 	bl	8000ba4 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <MX_ADC1_Init+0xa0>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000670:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800067e:	2201      	movs	r2, #1
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000692:	f000 fd21 	bl	80010d8 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800069c:	f000 fa82 	bl	8000ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC1_Init+0x9c>)
 80006b2:	f000 fe59 	bl	8001368 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006bc:	f000 fa72 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000118 	.word	0x20000118
 80006cc:	40012000 	.word	0x40012000

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_TIM2_Init+0xe4>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 201492-1;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000716:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_TIM2_Init+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4823      	ldr	r0, [pc, #140]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000728:	f003 fd72 	bl	8004210 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000732:	f000 fa37 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000740:	4619      	mov	r1, r3
 8000742:	481c      	ldr	r0, [pc, #112]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000744:	f003 ff7e 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800074e:	f000 fa29 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000752:	4818      	ldr	r0, [pc, #96]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000754:	f003 fdab 	bl	80042ae <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800075e:	f000 fa21 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000762:	2320      	movs	r3, #32
 8000764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000772:	f004 fbcd 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800077c:	f000 fa12 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 240-1;
 8000784:	23ef      	movs	r3, #239	; 0xef
 8000786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000788:	2302      	movs	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_TIM2_Init+0xe4>)
 8000798:	f003 fe92 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80007a2:	f000 f9ff 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a6:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_TIM2_Init+0xe4>)
 80007a8:	f000 fb02 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 80007ac:	bf00      	nop
 80007ae:	3738      	adds	r7, #56	; 0x38
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200001c0 	.word	0x200001c0
 80007b8:	00031313 	.word	0x00031313

080007bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007ee:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12-1;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000800:	220b      	movs	r2, #11
 8000802:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000812:	f003 fcfd 	bl	8004210 <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800081c:	f000 f9c2 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	4619      	mov	r1, r3
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800082e:	f003 ff09 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000838:	f000 f9b4 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800083e:	f003 fd36 	bl	80042ae <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 f9ac 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084c:	2320      	movs	r3, #32
 800084e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800085c:	f004 fb58 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000866:	f000 f99d 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6-1;
 800086e:	2305      	movs	r3, #5
 8000870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000872:	2302      	movs	r3, #2
 8000874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000882:	f003 fe1d 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800088c:	f000 f98a 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000892:	f000 fa8d 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	; 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000208 	.word	0x20000208
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b092      	sub	sp, #72	; 0x48
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <MX_TIM4_Init+0x10c>)
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <MX_TIM4_Init+0x110>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_TIM4_Init+0x10c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_TIM4_Init+0x10c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48-1;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_TIM4_Init+0x10c>)
 80008fc:	222f      	movs	r2, #47	; 0x2f
 80008fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_TIM4_Init+0x10c>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_TIM4_Init+0x10c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <MX_TIM4_Init+0x10c>)
 800090e:	f003 fc7f 	bl	8004210 <HAL_TIM_Base_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000918:	f000 f944 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000926:	4619      	mov	r1, r3
 8000928:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_TIM4_Init+0x10c>)
 800092a:	f003 fe8b 	bl	8004644 <HAL_TIM_ConfigClockSource>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000934:	f000 f936 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000938:	481e      	ldr	r0, [pc, #120]	; (80009b4 <MX_TIM4_Init+0x10c>)
 800093a:	f003 fcb8 	bl	80042ae <HAL_TIM_PWM_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000944:	f000 f92e 	bl	8000ba4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000948:	2306      	movs	r3, #6
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4817      	ldr	r0, [pc, #92]	; (80009b4 <MX_TIM4_Init+0x10c>)
 8000958:	f003 ff3b 	bl	80047d2 <HAL_TIM_SlaveConfigSynchro>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000962:	f000 f91f 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000966:	2320      	movs	r3, #32
 8000968:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_TIM4_Init+0x10c>)
 8000976:	f004 facb 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000980:	f000 f910 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000984:	2360      	movs	r3, #96	; 0x60
 8000986:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 12-1;
 8000988:	230b      	movs	r3, #11
 800098a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	220c      	movs	r2, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM4_Init+0x10c>)
 800099c:	f003 fd90 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80009a6:	f000 f8fd 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3748      	adds	r7, #72	; 0x48
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	40000800 	.word	0x40000800

080009bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	; 0x48
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009fc:	4b33      	ldr	r3, [pc, #204]	; (8000acc <MX_TIM5_Init+0x110>)
 80009fe:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <MX_TIM5_Init+0x114>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 201492-1;
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a10:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <MX_TIM5_Init+0x118>)
 8000a12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a20:	482a      	ldr	r0, [pc, #168]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a22:	f003 fbf5 	bl	8004210 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f8ba 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4823      	ldr	r0, [pc, #140]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a3e:	f003 fe01 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f8ac 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a4c:	481f      	ldr	r0, [pc, #124]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a4e:	f003 fc2e 	bl	80042ae <HAL_TIM_PWM_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000a58:	f000 f8a4 	bl	8000ba4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a6c:	f003 feb1 	bl	80047d2 <HAL_TIM_SlaveConfigSynchro>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000a76:	f000 f895 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <MX_TIM5_Init+0x110>)
 8000a8a:	f004 fa41 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000a94:	f000 f886 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	; 0x60
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 108-1;
 8000a9c:	236b      	movs	r3, #107	; 0x6b
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM5_Init+0x110>)
 8000ab0:	f003 fd06 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8000aba:	f000 f873 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM5_Init+0x110>)
 8000ac0:	f000 f976 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3748      	adds	r7, #72	; 0x48
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000298 	.word	0x20000298
 8000ad0:	40000c00 	.word	0x40000c00
 8000ad4:	00031313 	.word	0x00031313

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_DMA_Init+0x3c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <MX_DMA_Init+0x3c>)
 8000ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_DMA_Init+0x3c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2038      	movs	r0, #56	; 0x38
 8000b00:	f000 ffad 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b04:	2038      	movs	r0, #56	; 0x38
 8000b06:	f000 ffc6 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);
 8000b8c:	f241 7170 	movw	r1, #6000	; 0x1770
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b92:	f007 feff 	bl	8008994 <CDC_Transmit_FS>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002e0 	.word	0x200002e0

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <HAL_ADC_MspInit+0xd8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d156      	bne.n	8000cd0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HAL_ADC_MspInit+0xdc>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a2c      	ldr	r2, [pc, #176]	; (8000cdc <HAL_ADC_MspInit+0xdc>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_ADC_MspInit+0xdc>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <HAL_ADC_MspInit+0xdc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <HAL_ADC_MspInit+0xdc>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_ADC_MspInit+0xdc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <HAL_ADC_MspInit+0xe0>)
 8000c6e:	f001 fa9d 	bl	80021ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c74:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_ADC_MspInit+0xe8>)
 8000c76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000cb6:	f000 ff09 	bl	8001acc <HAL_DMA_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000cc0:	f7ff ff70 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_ADC_MspInit+0xe4>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	20000160 	.word	0x20000160
 8000ce8:	40026410 	.word	0x40026410

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d10e      	bne.n	8000d1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d1a:	e03a      	b.n	8000d92 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <HAL_TIM_Base_MspInit+0xb8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10e      	bne.n	8000d44 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
}
 8000d42:	e026      	b.n	8000d92 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_TIM_Base_MspInit+0xbc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10e      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
}
 8000d6a:	e012      	b.n	8000d92 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_TIM_Base_MspInit+0xc0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10d      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40000400 	.word	0x40000400
 8000da8:	40000800 	.word	0x40000800
 8000dac:	40000c00 	.word	0x40000c00

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd0:	d11e      	bne.n	8000e10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dee:	2301      	movs	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4828      	ldr	r0, [pc, #160]	; (8000eac <HAL_TIM_MspPostInit+0xfc>)
 8000e0a:	f001 f9cf 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000e0e:	e046      	b.n	8000e9e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <HAL_TIM_MspPostInit+0x100>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11e      	bne.n	8000e58 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e46:	2302      	movs	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4816      	ldr	r0, [pc, #88]	; (8000eac <HAL_TIM_MspPostInit+0xfc>)
 8000e52:	f001 f9ab 	bl	80021ac <HAL_GPIO_Init>
}
 8000e56:	e022      	b.n	8000e9e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <HAL_TIM_MspPostInit+0x104>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d11d      	bne.n	8000e9e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_TIM_MspPostInit+0xf8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <HAL_TIM_MspPostInit+0xfc>)
 8000e9a:	f001 f987 	bl	80021ac <HAL_GPIO_Init>
}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40000400 	.word	0x40000400
 8000eb4:	40000c00 	.word	0x40000c00

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f8a4 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <DMA2_Stream0_IRQHandler+0x10>)
 8000f12:	f000 fee1 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000160 	.word	0x20000160

08000f20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <OTG_FS_IRQHandler+0x10>)
 8000f26:	f001 fc15 	bl	8002754 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200046a4 	.word	0x200046a4

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f008 f961 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff faa5 	bl	80004d8 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f9c:	0800932c 	.word	0x0800932c
  ldr r2, =_sbss
 8000fa0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000fa4:	20004dd0 	.word	0x20004dd0

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 fd37 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fde6 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd4f 	bl	8001ab2 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 fd17 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200031c0 	.word	0x200031c0

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200031c0 	.word	0x200031c0

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e033      	b.n	8001156 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fd82 	bl	8000c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800111e:	f023 0302 	bic.w	r3, r3, #2
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fa3e 	bl	80015ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
 8001146:	e001      	b.n	800114c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_ADC_Start_DMA+0x1e>
 800117a:	2302      	movs	r3, #2
 800117c:	e0ce      	b.n	800131c <HAL_ADC_Start_DMA+0x1bc>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d018      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a4:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <HAL_ADC_Start_DMA+0x1c4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a5f      	ldr	r2, [pc, #380]	; (8001328 <HAL_ADC_Start_DMA+0x1c8>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9a      	lsrs	r2, r3, #18
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	3b01      	subs	r3, #1
 80011be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d4:	d107      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f040 8086 	bne.w	8001302 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001220:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001234:	d106      	bne.n	8001244 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f023 0206 	bic.w	r2, r3, #6
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
 8001242:	e002      	b.n	800124a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_ADC_Start_DMA+0x1cc>)
 8001254:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	4a35      	ldr	r2, [pc, #212]	; (8001330 <HAL_ADC_Start_DMA+0x1d0>)
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <HAL_ADC_Start_DMA+0x1d4>)
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	4a33      	ldr	r2, [pc, #204]	; (8001338 <HAL_ADC_Start_DMA+0x1d8>)
 800126c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001276:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001286:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001296:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	334c      	adds	r3, #76	; 0x4c
 80012a2:	4619      	mov	r1, r3
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f000 fcbe 	bl	8001c28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10f      	bne.n	80012d8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d129      	bne.n	800131a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	e020      	b.n	800131a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_ADC_Start_DMA+0x1dc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11b      	bne.n	800131a <HAL_ADC_Start_DMA+0x1ba>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d114      	bne.n	800131a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	e00b      	b.n	800131a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	431bde83 	.word	0x431bde83
 800132c:	40012300 	.word	0x40012300
 8001330:	080017a5 	.word	0x080017a5
 8001334:	0800185f 	.word	0x0800185f
 8001338:	0800187b 	.word	0x0800187b
 800133c:	40012000 	.word	0x40012000

08001340 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1c>
 8001380:	2302      	movs	r3, #2
 8001382:	e105      	b.n	8001590 <HAL_ADC_ConfigChannel+0x228>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d925      	bls.n	80013e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68d9      	ldr	r1, [r3, #12]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	3b1e      	subs	r3, #30
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68d9      	ldr	r1, [r3, #12]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4403      	add	r3, r0
 80013d2:	3b1e      	subs	r3, #30
 80013d4:	409a      	lsls	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	e022      	b.n	8001426 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6919      	ldr	r1, [r3, #16]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	2207      	movs	r2, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4403      	add	r3, r0
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b06      	cmp	r3, #6
 800142c:	d824      	bhi.n	8001478 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3b05      	subs	r3, #5
 8001440:	221f      	movs	r2, #31
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b05      	subs	r3, #5
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	635a      	str	r2, [r3, #52]	; 0x34
 8001476:	e04c      	b.n	8001512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d824      	bhi.n	80014ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b23      	subs	r3, #35	; 0x23
 8001492:	221f      	movs	r2, #31
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43da      	mvns	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	400a      	ands	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b23      	subs	r3, #35	; 0x23
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
 80014c8:	e023      	b.n	8001512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b41      	subs	r3, #65	; 0x41
 80014dc:	221f      	movs	r2, #31
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	400a      	ands	r2, r1
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	3b41      	subs	r3, #65	; 0x41
 8001506:	fa00 f203 	lsl.w	r2, r0, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_ADC_ConfigChannel+0x234>)
 8001514:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_ADC_ConfigChannel+0x238>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d109      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1cc>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d105      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_ADC_ConfigChannel+0x238>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d123      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b10      	cmp	r3, #16
 8001544:	d003      	beq.n	800154e <HAL_ADC_ConfigChannel+0x1e6>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b11      	cmp	r3, #17
 800154c:	d11b      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d111      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_ADC_ConfigChannel+0x240>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9a      	lsrs	r2, r3, #18
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40012300 	.word	0x40012300
 80015a0:	40012000 	.word	0x40012000
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <ADC_Init+0x1f0>)
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <ADC_Init+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00f      	b.n	80016aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0202 	bic.w	r2, r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	035a      	lsls	r2, r3, #13
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e007      	b.n	8001720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	3b01      	subs	r3, #1
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001762:	025a      	lsls	r2, r3, #9
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	029a      	lsls	r2, r3, #10
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d13c      	bne.n	8001838 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d12b      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d127      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d119      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0220 	bic.w	r2, r2, #32
 800180a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff f9a7 	bl	8000b84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001836:	e00e      	b.n	8001856 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff fd85 	bl	8001354 <HAL_ADC_ErrorCallback>
}
 800184a:	e004      	b.n	8001856 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff fd67 	bl	8001340 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0204 	orr.w	r2, r3, #4
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fd5a 	bl	8001354 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff3e 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff31 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff face 	bl	8001078 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e099      	b.n	8001c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b08:	e00f      	b.n	8001b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0a:	f7ff fab5 	bl	8001078 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d908      	bls.n	8001b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e078      	b.n	8001c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e8      	bne.n	8001b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_DMA_Init+0x158>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
 8001baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d117      	bne.n	8001bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fa6f 	bl	80020b4 <DMA_CheckFifoParam>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bea:	2301      	movs	r3, #1
 8001bec:	e016      	b.n	8001c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fa26 	bl	8002048 <DMA_CalcBaseAndBitshift>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f010803f 	.word	0xf010803f

08001c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_DMA_Start_IT+0x26>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e040      	b.n	8001cd0 <HAL_DMA_Start_IT+0xa8>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d12f      	bne.n	8001cc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f9b8 	bl	8001fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0216 	orr.w	r2, r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e005      	b.n	8001cce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <HAL_DMA_IRQHandler+0x248>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a8e      	ldr	r2, [pc, #568]	; (8001f24 <HAL_DMA_IRQHandler+0x24c>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0a9b      	lsrs	r3, r3, #10
 8001cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2208      	movs	r2, #8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2208      	movs	r2, #8
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2201      	movs	r2, #1
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0202 	orr.w	r2, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2204      	movs	r2, #4
 8001d80:	409a      	lsls	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2210      	movs	r2, #16
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d043      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03c      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d018      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d024      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
 8001e06:	e01f      	b.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	e016      	b.n	8001e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0208 	bic.w	r2, r2, #8
 8001e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 808f 	beq.w	8001f78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8087 	beq.w	8001f78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2220      	movs	r2, #32
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d136      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x1da>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	223f      	movs	r2, #63	; 0x3f
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d07e      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
        }
        return;
 8001eee:	e079      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01d      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10d      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d031      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e02c      	b.n	8001f78 <HAL_DMA_IRQHandler+0x2a0>
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000
 8001f24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e01e      	b.n	8001f78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10f      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0210 	bic.w	r2, r2, #16
 8001f56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d032      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d022      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2205      	movs	r2, #5
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d307      	bcc.n	8001fc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f2      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x2cc>
 8001fbe:	e000      	b.n	8001fc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
 8001fe2:	e000      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fe4:	bf00      	nop
    }
  }
}
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d108      	bne.n	800202c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800202a:	e007      	b.n	800203c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3b10      	subs	r3, #16
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <DMA_CalcBaseAndBitshift+0x64>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d909      	bls.n	800208a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	659a      	str	r2, [r3, #88]	; 0x58
 8002088:	e007      	b.n	800209a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	aaaaaaab 	.word	0xaaaaaaab
 80020b0:	08009314 	.word	0x08009314

080020b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11f      	bne.n	800210e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d856      	bhi.n	8002182 <DMA_CheckFifoParam+0xce>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x28>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020ff 	.word	0x080020ff
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002183 	.word	0x08002183
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d046      	beq.n	8002186 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e043      	b.n	8002186 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002106:	d140      	bne.n	800218a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e03d      	b.n	800218a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	d121      	bne.n	800215c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d837      	bhi.n	800218e <DMA_CheckFifoParam+0xda>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <DMA_CheckFifoParam+0x70>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213b 	.word	0x0800213b
 800212c:	08002135 	.word	0x08002135
 8002130:	0800214d 	.word	0x0800214d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e030      	b.n	800219c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d025      	beq.n	8002192 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214a:	e022      	b.n	8002192 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002154:	d11f      	bne.n	8002196 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800215a:	e01c      	b.n	8002196 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d903      	bls.n	800216a <DMA_CheckFifoParam+0xb6>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d003      	beq.n	8002170 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002168:	e018      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      break;
 800216e:	e015      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00e      	beq.n	800219a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      break;
 8002180:	e00b      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002182:	bf00      	nop
 8002184:	e00a      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e008      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
 800218c:	e006      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e004      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e002      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;   
 8002196:	bf00      	nop
 8002198:	e000      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
    }
  } 
  
  return status; 
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e159      	b.n	800247c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8148 	bne.w	8002476 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d005      	beq.n	80021fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d130      	bne.n	8002260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a2 	beq.w	8002476 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b57      	ldr	r3, [pc, #348]	; (8002494 <HAL_GPIO_Init+0x2e8>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_GPIO_Init+0x2e8>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b54      	ldr	r3, [pc, #336]	; (8002494 <HAL_GPIO_Init+0x2e8>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_GPIO_Init+0x2ec>)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a49      	ldr	r2, [pc, #292]	; (800249c <HAL_GPIO_Init+0x2f0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x202>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <HAL_GPIO_Init+0x2f4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x1fe>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a47      	ldr	r2, [pc, #284]	; (80024a4 <HAL_GPIO_Init+0x2f8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x1fa>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <HAL_GPIO_Init+0x2fc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x1f6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a45      	ldr	r2, [pc, #276]	; (80024ac <HAL_GPIO_Init+0x300>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x1f2>
 800239a:	2304      	movs	r3, #4
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 800239e:	2307      	movs	r3, #7
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023ae:	2300      	movs	r3, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c0:	4935      	ldr	r1, [pc, #212]	; (8002498 <HAL_GPIO_Init+0x2ec>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_GPIO_Init+0x304>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <HAL_GPIO_Init+0x304>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_GPIO_Init+0x304>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_GPIO_Init+0x304>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_GPIO_Init+0x304>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002470:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	f67f aea2 	bls.w	80021c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b6:	b08f      	sub	sp, #60	; 0x3c
 80024b8:	af0a      	add	r7, sp, #40	; 0x28
 80024ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e10f      	b.n	80026e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f006 fb9f 	bl	8008c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fe86 	bl	8005216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	687e      	ldr	r6, [r7, #4]
 8002512:	466d      	mov	r5, sp
 8002514:	f106 0410 	add.w	r4, r6, #16
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002524:	e885 0003 	stmia.w	r5, {r0, r1}
 8002528:	1d33      	adds	r3, r6, #4
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f002 fd5d 	bl	8004fec <USB_CoreInit>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d0      	b.n	80026e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fe74 	bl	8005238 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e04a      	b.n	80025ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	333d      	adds	r3, #61	; 0x3d
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	333c      	adds	r3, #60	; 0x3c
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	b298      	uxth	r0, r3
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3344      	adds	r3, #68	; 0x44
 8002592:	4602      	mov	r2, r0
 8002594:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3340      	adds	r3, #64	; 0x40
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3348      	adds	r3, #72	; 0x48
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	334c      	adds	r3, #76	; 0x4c
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3354      	adds	r3, #84	; 0x54
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	3301      	adds	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3af      	bcc.n	8002556 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e044      	b.n	8002686 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	3301      	adds	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3b5      	bcc.n	80025fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	687e      	ldr	r6, [r7, #4]
 8002698:	466d      	mov	r5, sp
 800269a:	f106 0410 	add.w	r4, r6, #16
 800269e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ae:	1d33      	adds	r3, r6, #4
 80026b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b2:	6838      	ldr	r0, [r7, #0]
 80026b4:	f002 fe0c 	bl	80052d0 <USB_DevInit>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00d      	b.n	80026e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 ff5b 	bl	800659a <USB_DevDisconnect>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_PCD_Start+0x1c>
 8002706:	2302      	movs	r3, #2
 8002708:	e020      	b.n	800274c <HAL_PCD_Start+0x5e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	2b01      	cmp	r3, #1
 8002718:	d109      	bne.n	800272e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fd5e 	bl	80051f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 ff0b 	bl	8006558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b08d      	sub	sp, #52	; 0x34
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 ffc9 	bl	8006702 <USB_GetMode>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 848a 	bne.w	800308c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 ff2d 	bl	80065dc <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8480 	beq.w	800308a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 ff1a 	bl	80065dc <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f002 0202 	and.w	r2, r2, #2
 80027c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 ff08 	bl	80065dc <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d161      	bne.n	800289a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0210 	bic.w	r2, r2, #16
 80027e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 020f 	and.w	r2, r3, #15
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	0c5b      	lsrs	r3, r3, #17
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	2b02      	cmp	r3, #2
 8002810:	d124      	bne.n	800285c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d035      	beq.n	800288a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	6a38      	ldr	r0, [r7, #32]
 8002832:	f003 fd3f 	bl	80062b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002842:	441a      	add	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002854:	441a      	add	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	621a      	str	r2, [r3, #32]
 800285a:	e016      	b.n	800288a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	0c5b      	lsrs	r3, r3, #17
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	2b06      	cmp	r3, #6
 8002866:	d110      	bne.n	800288a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800286e:	2208      	movs	r2, #8
 8002870:	4619      	mov	r1, r3
 8002872:	6a38      	ldr	r0, [r7, #32]
 8002874:	f003 fd1e 	bl	80062b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002884:	441a      	add	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0210 	orr.w	r2, r2, #16
 8002898:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fe9c 	bl	80065dc <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ae:	f040 80a7 	bne.w	8002a00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fea1 	bl	8006602 <USB_ReadDevAllOutEpInterrupt>
 80028c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028c2:	e099      	b.n	80029f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 808e 	beq.w	80029ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 fec5 	bl	800666a <USB_ReadDevOutEPInterrupt>
 80028e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00c      	beq.n	8002906 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f8:	461a      	mov	r2, r3
 80028fa:	2301      	movs	r3, #1
 80028fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fec3 	bl	800368c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291c:	461a      	mov	r2, r3
 800291e:	2308      	movs	r3, #8
 8002920:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 ff99 	bl	800385c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	461a      	mov	r2, r3
 8002942:	2310      	movs	r3, #16
 8002944:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d030      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d109      	bne.n	8002970 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	78db      	ldrb	r3, [r3, #3]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f006 fa48 	bl	8008e30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ac:	461a      	mov	r2, r3
 80029ae:	2302      	movs	r3, #2
 80029b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c8:	461a      	mov	r2, r3
 80029ca:	2320      	movs	r3, #32
 80029cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e4:	461a      	mov	r2, r3
 80029e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	3301      	adds	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f47f af62 	bne.w	80028c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fde9 	bl	80065dc <USB_ReadInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a14:	f040 80db 	bne.w	8002bce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 fe0a 	bl	8006636 <USB_ReadDevAllInEpInterrupt>
 8002a22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a28:	e0cd      	b.n	8002bc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80c2 	beq.w	8002bba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fe30 	bl	80066a6 <USB_ReadDevInEPInterrupt>
 8002a46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d057      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	2201      	movs	r2, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69f9      	ldr	r1, [r7, #28]
 8002a6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a72:	4013      	ands	r3, r2
 8002a74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a82:	461a      	mov	r2, r3
 8002a84:	2301      	movs	r3, #1
 8002a86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d132      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334c      	adds	r3, #76	; 0x4c
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	3348      	adds	r3, #72	; 0x48
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4419      	add	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4403      	add	r3, r0
 8002ac4:	334c      	adds	r3, #76	; 0x4c
 8002ac6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d113      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x3a2>
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3354      	adds	r3, #84	; 0x54
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d108      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aee:	461a      	mov	r2, r3
 8002af0:	2101      	movs	r1, #1
 8002af2:	f003 fe37 	bl	8006764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f006 f912 	bl	8008d26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b34:	461a      	mov	r2, r3
 8002b36:	2310      	movs	r3, #16
 8002b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b50:	461a      	mov	r2, r3
 8002b52:	2340      	movs	r3, #64	; 0x40
 8002b54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b62:	6a38      	ldr	r0, [r7, #32]
 8002b64:	f002 fd18 	bl	8005598 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3338      	adds	r3, #56	; 0x38
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	78db      	ldrb	r3, [r3, #3]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d108      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f006 f95f 	bl	8008e54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fcdb 	bl	8003570 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af2e 	bne.w	8002a2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fd02 	bl	80065dc <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be2:	d122      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fec3 	bl	8003998 <HAL_PCDEx_LPM_Callback>
 8002c12:	e002      	b.n	8002c1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f006 f8fd 	bl	8008e14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fcd4 	bl	80065dc <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3e:	d112      	bne.n	8002c66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f006 f8b9 	bl	8008dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c64:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fcb6 	bl	80065dc <USB_ReadInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	f040 80b7 	bne.w	8002dec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2110      	movs	r1, #16
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 fc7d 	bl	8005598 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca2:	e046      	b.n	8002d32 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	0151      	lsls	r1, r2, #5
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	440a      	add	r2, r1
 8002cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfc:	0151      	lsls	r1, r2, #5
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	440a      	add	r2, r1
 8002d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	3301      	adds	r3, #1
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3b3      	bcc.n	8002ca4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d4e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d016      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d68:	f043 030b 	orr.w	r3, r3, #11
 8002d6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7e:	f043 030b 	orr.w	r3, r3, #11
 8002d82:	6453      	str	r3, [r2, #68]	; 0x44
 8002d84:	e015      	b.n	8002db2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d98:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d9c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dac:	f043 030b 	orr.w	r3, r3, #11
 8002db0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dc4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f003 fcc4 	bl	8006764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 fbf3 	bl	80065dc <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e00:	d124      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fc89 	bl	800671e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 fc3e 	bl	8005692 <USB_GetDevSpeed>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681c      	ldr	r4, [r3, #0]
 8002e22:	f001 f9e9 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8002e26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4620      	mov	r0, r4
 8002e32:	f002 f93d 	bl	80050b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f005 ff9d 	bl	8008d76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 fbc3 	bl	80065dc <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d10a      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f005 ff7a 	bl	8008d5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f002 0208 	and.w	r2, r2, #8
 8002e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 fbae 	bl	80065dc <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	d122      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e96:	2301      	movs	r3, #1
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9a:	e014      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb27 	bl	800350e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3e5      	bcc.n	8002e9c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fb81 	bl	80065dc <USB_ReadInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee4:	d13b      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	e02b      	b.n	8002f44 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3340      	adds	r3, #64	; 0x40
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d115      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da12      	bge.n	8002f3e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	333f      	adds	r3, #63	; 0x3f
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fae8 	bl	800350e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	3301      	adds	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3ce      	bcc.n	8002eec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fb3a 	bl	80065dc <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f72:	d155      	bne.n	8003020 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f74:	2301      	movs	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e045      	b.n	8003006 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d12e      	bne.n	8003000 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fa2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da2b      	bge.n	8003000 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fb4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d121      	bne.n	8003000 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffc:	6053      	str	r3, [r2, #4]
            break;
 8002ffe:	e007      	b.n	8003010 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	3301      	adds	r3, #1
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	429a      	cmp	r2, r3
 800300e:	d3b4      	bcc.n	8002f7a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800301e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 fad9 	bl	80065dc <USB_ReadInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d10a      	bne.n	800304c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f005 ff1e 	bl	8008e78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800304a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fac3 	bl	80065dc <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d115      	bne.n	800308c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f005 ff0e 	bl	8008e94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	e000      	b.n	800308c <HAL_PCD_IRQHandler+0x938>
      return;
 800308a:	bf00      	nop
    }
  }
}
 800308c:	3734      	adds	r7, #52	; 0x34
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}

08003092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_PCD_SetAddress+0x1a>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e013      	b.n	80030d4 <HAL_PCD_SetAddress+0x42>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 fa21 	bl	800650c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	70fb      	strb	r3, [r7, #3]
 80030ee:	460b      	mov	r3, r1
 80030f0:	803b      	strh	r3, [r7, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da0f      	bge.n	8003122 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	3338      	adds	r3, #56	; 0x38
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	705a      	strb	r2, [r3, #1]
 8003120:	e00f      	b.n	8003142 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800314e:	883a      	ldrh	r2, [r7, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	78ba      	ldrb	r2, [r7, #2]
 8003158:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800316c:	78bb      	ldrb	r3, [r7, #2]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d102      	bne.n	8003178 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_PCD_EP_Open+0xaa>
 8003182:	2302      	movs	r3, #2
 8003184:	e00e      	b.n	80031a4 <HAL_PCD_EP_Open+0xc8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 faa1 	bl	80056dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80031a2:	7afb      	ldrb	r3, [r7, #11]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da0f      	bge.n	80031e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3338      	adds	r3, #56	; 0x38
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	705a      	strb	r2, [r3, #1]
 80031de:	e00f      	b.n	8003200 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_PCD_EP_Close+0x6e>
 8003216:	2302      	movs	r3, #2
 8003218:	e00e      	b.n	8003238 <HAL_PCD_EP_Close+0x8c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fadf 	bl	80057ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800329c:	7afb      	ldrb	r3, [r7, #11]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	f002 fdbe 	bl	8005e34 <USB_EP0StartXfer>
 80032b8:	e008      	b.n	80032cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6979      	ldr	r1, [r7, #20]
 80032c8:	f002 fb6c 	bl	80059a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032f8:	681b      	ldr	r3, [r3, #0]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	460b      	mov	r3, r1
 8003314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003316:	7afb      	ldrb	r3, [r7, #11]
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3338      	adds	r3, #56	; 0x38
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2201      	movs	r2, #1
 8003344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	b2da      	uxtb	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	f002 fd5c 	bl	8005e34 <USB_EP0StartXfer>
 800337c:	e008      	b.n	8003390 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	6979      	ldr	r1, [r7, #20]
 800338c:	f002 fb0a 	bl	80059a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d901      	bls.n	80033b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e050      	b.n	800345a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0f      	bge.n	80033e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00d      	b.n	80033fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_PCD_EP_SetStall+0x82>
 8003418:	2302      	movs	r3, #2
 800341a:	e01e      	b.n	800345a <HAL_PCD_EP_SetStall+0xc0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	4618      	mov	r0, r3
 800342c:	f002 ff9a 	bl	8006364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	b2d9      	uxtb	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800344a:	461a      	mov	r2, r3
 800344c:	f003 f98a 	bl	8006764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	f003 020f 	and.w	r2, r3, #15
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d901      	bls.n	8003480 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e042      	b.n	8003506 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003484:	2b00      	cmp	r3, #0
 8003486:	da0f      	bge.n	80034a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3338      	adds	r3, #56	; 0x38
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	3304      	adds	r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	705a      	strb	r2, [r3, #1]
 80034a6:	e00f      	b.n	80034c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_EP_ClrStall+0x86>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e00e      	b.n	8003506 <HAL_PCD_EP_ClrStall+0xa4>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 ffa2 	bl	8006440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800351a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da0c      	bge.n	800353c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3338      	adds	r3, #56	; 0x38
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e00c      	b.n	8003556 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fdc1 	bl	80060e4 <USB_EPStopXfer>
 8003562:	4603      	mov	r3, r0
 8003564:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003566:	7afb      	ldrb	r3, [r7, #11]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	3338      	adds	r3, #56	; 0x38
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d901      	bls.n	80035a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e06c      	b.n	8003682 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d902      	bls.n	80035c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3303      	adds	r3, #3
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035cc:	e02b      	b.n	8003626 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d902      	bls.n	80035ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3303      	adds	r3, #3
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6919      	ldr	r1, [r3, #16]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003602:	b2db      	uxtb	r3, r3
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4603      	mov	r3, r0
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f002 fe15 	bl	8006238 <USB_WritePacket>

    ep->xfer_buff  += len;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	441a      	add	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	441a      	add	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	b29b      	uxth	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	429a      	cmp	r2, r3
 800363a:	d809      	bhi.n	8003650 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003644:	429a      	cmp	r2, r3
 8003646:	d203      	bcs.n	8003650 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1be      	bne.n	80035ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	429a      	cmp	r2, r3
 800365a:	d811      	bhi.n	8003680 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	2201      	movs	r2, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	43db      	mvns	r3, r3
 8003676:	6939      	ldr	r1, [r7, #16]
 8003678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800367c:	4013      	ands	r3, r2
 800367e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	333c      	adds	r3, #60	; 0x3c
 80036a4:	3304      	adds	r3, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d17b      	bne.n	80037ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	4a61      	ldr	r2, [pc, #388]	; (8003854 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f240 80b9 	bls.w	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80b3 	beq.w	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ee:	461a      	mov	r2, r3
 80036f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f4:	6093      	str	r3, [r2, #8]
 80036f6:	e0a7      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	461a      	mov	r2, r3
 8003710:	2320      	movs	r3, #32
 8003712:	6093      	str	r3, [r2, #8]
 8003714:	e098      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	f040 8093 	bne.w	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	4a4b      	ldr	r2, [pc, #300]	; (8003854 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d90f      	bls.n	800374a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003740:	461a      	mov	r2, r3
 8003742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003746:	6093      	str	r3, [r2, #8]
 8003748:	e07e      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	0159      	lsls	r1, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	440b      	add	r3, r1
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003776:	1ad2      	subs	r2, r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d114      	bne.n	80037ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003794:	461a      	mov	r2, r3
 8003796:	2101      	movs	r1, #1
 8003798:	f002 ffe4 	bl	8006764 <USB_EP0_OutStart>
 800379c:	e006      	b.n	80037ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f005 fa9c 	bl	8008cf0 <HAL_PCD_DataOutStageCallback>
 80037b8:	e046      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d124      	bne.n	800380c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	e032      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	2320      	movs	r3, #32
 80037fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f005 fa73 	bl	8008cf0 <HAL_PCD_DataOutStageCallback>
 800380a:	e01d      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d114      	bne.n	800383c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d108      	bne.n	800383c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003834:	461a      	mov	r2, r3
 8003836:	2100      	movs	r1, #0
 8003838:	f002 ff94 	bl	8006764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f005 fa54 	bl	8008cf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	4f54300a 	.word	0x4f54300a
 8003858:	4f54310a 	.word	0x4f54310a

0800385c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	333c      	adds	r3, #60	; 0x3c
 8003874:	3304      	adds	r3, #4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d90e      	bls.n	80038b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a8:	461a      	mov	r2, r3
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f005 fa0b 	bl	8008ccc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d90c      	bls.n	80038d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d0:	461a      	mov	r2, r3
 80038d2:	2101      	movs	r1, #1
 80038d4:	f002 ff46 	bl	8006764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	4f54300a 	.word	0x4f54300a

080038e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
 80038f4:	4613      	mov	r3, r2
 80038f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003906:	883b      	ldrh	r3, [r7, #0]
 8003908:	0419      	lsls	r1, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	430a      	orrs	r2, r1
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
 8003914:	e028      	b.n	8003968 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	4413      	add	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e00d      	b.n	8003946 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	3340      	adds	r3, #64	; 0x40
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4413      	add	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	3301      	adds	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	3b01      	subs	r3, #1
 800394c:	429a      	cmp	r2, r3
 800394e:	d3ec      	bcc.n	800392a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003950:	883b      	ldrh	r3, [r7, #0]
 8003952:	0418      	lsls	r0, r3, #16
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	3b01      	subs	r3, #1
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	4302      	orrs	r2, r0
 8003960:	3340      	adds	r3, #64	; 0x40
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e267      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d075      	beq.n	8003aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d00c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039da:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d112      	bne.n	8003a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e6:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	4b7e      	ldr	r3, [pc, #504]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d05b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x108>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d157      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e242      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_OscConfig+0x74>
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0xb0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x98>
 8003a2e:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6c      	ldr	r2, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0xb0>
 8003a48:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fb06 	bl	8001078 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fd fb02 	bl	8001078 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e207      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0xc0>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd faf2 	bl	8001078 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd faee 	bl	8001078 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1f3      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	4b51      	ldr	r3, [pc, #324]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0xe8>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d063      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ade:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x152>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1c7      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4937      	ldr	r1, [pc, #220]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	e03a      	b.n	8003b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <HAL_RCC_OscConfig+0x244>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fd faa7 	bl	8001078 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fd faa3 	bl	8001078 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1a8      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4925      	ldr	r1, [pc, #148]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	e015      	b.n	8003b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_OscConfig+0x244>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fd fa86 	bl	8001078 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fd fa82 	bl	8001078 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e187      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d036      	beq.n	8003c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_RCC_OscConfig+0x248>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fa66 	bl	8001078 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fd fa62 	bl	8001078 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e167      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x200>
 8003bce:	e01b      	b.n	8003c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCC_OscConfig+0x248>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fa4f 	bl	8001078 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bde:	f7fd fa4b 	bl	8001078 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d907      	bls.n	8003bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e150      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470000 	.word	0x42470000
 8003bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ea      	bne.n	8003bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8097 	beq.w	8003d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1a:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	4b7d      	ldr	r3, [pc, #500]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	; 0x40
 8003c36:	4b7a      	ldr	r3, [pc, #488]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b77      	ldr	r3, [pc, #476]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d118      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c52:	4b74      	ldr	r3, [pc, #464]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a73      	ldr	r2, [pc, #460]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fa0b 	bl	8001078 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c66:	f7fd fa07 	bl	8001078 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e10c      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCC_OscConfig+0x2ea>
 8003c8c:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a63      	ldr	r2, [pc, #396]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x324>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x30c>
 8003ca2:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x324>
 8003cbc:	4b58      	ldr	r3, [pc, #352]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a57      	ldr	r2, [pc, #348]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	4a54      	ldr	r2, [pc, #336]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cce:	f023 0304 	bic.w	r3, r3, #4
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd f9cc 	bl	8001078 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fd f9c8 	bl	8001078 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0cb      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	4b49      	ldr	r3, [pc, #292]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ee      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x334>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7fd f9b6 	bl	8001078 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fd f9b2 	bl	8001078 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0b5      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ee      	bne.n	8003d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d38:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a1 	beq.w	8003e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4e:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d05c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d141      	bne.n	8003de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCC_OscConfig+0x478>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd f986 	bl	8001078 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd f982 	bl	8001078 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e087      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	491b      	ldr	r1, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x478>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd f95b 	bl	8001078 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fd f957 	bl	8001078 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e05c      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x416>
 8003de4:	e054      	b.n	8003e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_RCC_OscConfig+0x478>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd f944 	bl	8001078 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd f940 	bl	8001078 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e045      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x444>
 8003e12:	e03d      	b.n	8003e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e038      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x4ec>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d028      	beq.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d121      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d11a      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d111      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800

08003ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0cc      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b68      	ldr	r3, [pc, #416]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d90c      	bls.n	8003edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b65      	ldr	r3, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d044      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d119      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e067      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f90:	f7fd f872 	bl	8001078 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fd f86e 	bl	8001078 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e04f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d20c      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc ffd2 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023c00 	.word	0x40023c00
 800405c:	40023800 	.word	0x40023800
 8004060:	08009304 	.word	0x08009304
 8004064:	20000000 	.word	0x20000000
 8004068:	20000004 	.word	0x20000004

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004070:	b090      	sub	sp, #64	; 0x40
 8004072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
 8004078:	2300      	movs	r3, #0
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407c:	2300      	movs	r3, #0
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004084:	4b59      	ldr	r3, [pc, #356]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d00d      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x40>
 8004090:	2b08      	cmp	r3, #8
 8004092:	f200 80a1 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x34>
 800409a:	2b04      	cmp	r3, #4
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800409e:	e09b      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040a4:	e09b      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a6:	4b53      	ldr	r3, [pc, #332]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040aa:	e098      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b6:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	2200      	movs	r2, #0
 80040ca:	623b      	str	r3, [r7, #32]
 80040cc:	627a      	str	r2, [r7, #36]	; 0x24
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040d4:	2100      	movs	r1, #0
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d8:	fb03 f201 	mul.w	r2, r3, r1
 80040dc:	2300      	movs	r3, #0
 80040de:	fb00 f303 	mul.w	r3, r0, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	4a43      	ldr	r2, [pc, #268]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040e6:	fba0 1202 	umull	r1, r2, r0, r2
 80040ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ec:	460a      	mov	r2, r1
 80040ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80040f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f2:	4413      	add	r3, r2
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	2200      	movs	r2, #0
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004106:	f7fc f865 	bl	80001d4 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4613      	mov	r3, r2
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004112:	e053      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4b35      	ldr	r3, [pc, #212]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	2200      	movs	r2, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	617a      	str	r2, [r7, #20]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004126:	f04f 0b00 	mov.w	fp, #0
 800412a:	4652      	mov	r2, sl
 800412c:	465b      	mov	r3, fp
 800412e:	f04f 0000 	mov.w	r0, #0
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	0159      	lsls	r1, r3, #5
 8004138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413c:	0150      	lsls	r0, r2, #5
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	ebb2 080a 	subs.w	r8, r2, sl
 8004146:	eb63 090b 	sbc.w	r9, r3, fp
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004156:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800415a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800415e:	ebb2 0408 	subs.w	r4, r2, r8
 8004162:	eb63 0509 	sbc.w	r5, r3, r9
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	00eb      	lsls	r3, r5, #3
 8004170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004174:	00e2      	lsls	r2, r4, #3
 8004176:	4614      	mov	r4, r2
 8004178:	461d      	mov	r5, r3
 800417a:	eb14 030a 	adds.w	r3, r4, sl
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	eb45 030b 	adc.w	r3, r5, fp
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004192:	4629      	mov	r1, r5
 8004194:	028b      	lsls	r3, r1, #10
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800419c:	4621      	mov	r1, r4
 800419e:	028a      	lsls	r2, r1, #10
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	2200      	movs	r2, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	60fa      	str	r2, [r7, #12]
 80041ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b0:	f7fc f810 	bl	80001d4 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3740      	adds	r7, #64	; 0x40
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	017d7840 	.word	0x017d7840

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000000 	.word	0x20000000

08004210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e041      	b.n	80042a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fc fd58 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f000 fb02 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e041      	b.n	8004344 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f839 	bl	800434c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fab3 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_TIM_PWM_Start+0x24>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e022      	b.n	80043ca <HAL_TIM_PWM_Start+0x6a>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d109      	bne.n	800439e <HAL_TIM_PWM_Start+0x3e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e015      	b.n	80043ca <HAL_TIM_PWM_Start+0x6a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d109      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x58>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e008      	b.n	80043ca <HAL_TIM_PWM_Start+0x6a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e068      	b.n	80044a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x82>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e0:	e013      	b.n	800440a <HAL_TIM_PWM_Start+0xaa>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_PWM_Start+0x92>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f0:	e00b      	b.n	800440a <HAL_TIM_PWM_Start+0xaa>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d104      	bne.n	8004402 <HAL_TIM_PWM_Start+0xa2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004400:	e003      	b.n	800440a <HAL_TIM_PWM_Start+0xaa>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	6839      	ldr	r1, [r7, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fd57 	bl	8004ec6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_TIM_PWM_Start+0x14c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d107      	bne.n	8004432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <HAL_TIM_PWM_Start+0x14c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_TIM_PWM_Start+0x10e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d013      	beq.n	800446e <HAL_TIM_PWM_Start+0x10e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_TIM_PWM_Start+0x150>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIM_PWM_Start+0x10e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <HAL_TIM_PWM_Start+0x154>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_TIM_PWM_Start+0x10e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_TIM_PWM_Start+0x158>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_PWM_Start+0x10e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a14      	ldr	r2, [pc, #80]	; (80044bc <HAL_TIM_PWM_Start+0x15c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b06      	cmp	r3, #6
 800447e:	d010      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	e007      	b.n	80044a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	40014000 	.word	0x40014000

080044c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e0ae      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	f200 809f 	bhi.w	800462c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004529 	.word	0x08004529
 80044f8:	0800462d 	.word	0x0800462d
 80044fc:	0800462d 	.word	0x0800462d
 8004500:	0800462d 	.word	0x0800462d
 8004504:	08004569 	.word	0x08004569
 8004508:	0800462d 	.word	0x0800462d
 800450c:	0800462d 	.word	0x0800462d
 8004510:	0800462d 	.word	0x0800462d
 8004514:	080045ab 	.word	0x080045ab
 8004518:	0800462d 	.word	0x0800462d
 800451c:	0800462d 	.word	0x0800462d
 8004520:	0800462d 	.word	0x0800462d
 8004524:	080045eb 	.word	0x080045eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fa12 	bl	8004958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0204 	bic.w	r2, r2, #4
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	619a      	str	r2, [r3, #24]
      break;
 8004566:	e064      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fa58 	bl	8004a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	021a      	lsls	r2, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	619a      	str	r2, [r3, #24]
      break;
 80045a8:	e043      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 faa3 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0208 	orr.w	r2, r2, #8
 80045c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0204 	bic.w	r2, r2, #4
 80045d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
      break;
 80045e8:	e023      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 faed 	bl	8004bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	021a      	lsls	r2, r3, #8
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	61da      	str	r2, [r3, #28]
      break;
 800462a:	e002      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
      break;
 8004630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIM_ConfigClockSource+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e0b4      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x186>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800467e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004698:	d03e      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xd4>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469e:	f200 8087 	bhi.w	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	f000 8086 	beq.w	80047b6 <HAL_TIM_ConfigClockSource+0x172>
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ae:	d87f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d01a      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xa6>
 80046b4:	2b70      	cmp	r3, #112	; 0x70
 80046b6:	d87b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d050      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x11a>
 80046bc:	2b60      	cmp	r3, #96	; 0x60
 80046be:	d877      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b50      	cmp	r3, #80	; 0x50
 80046c2:	d03c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xfa>
 80046c4:	2b50      	cmp	r3, #80	; 0x50
 80046c6:	d873      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d058      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x13a>
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d86f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d064      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b30      	cmp	r3, #48	; 0x30
 80046d6:	d86b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d060      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d867      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d05a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	e062      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f000 fbc4 	bl	8004e86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800470c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	609a      	str	r2, [r3, #8]
      break;
 8004716:	e04f      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f000 fbad 	bl	8004e86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800473a:	609a      	str	r2, [r3, #8]
      break;
 800473c:	e03c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fb21 	bl	8004d92 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2150      	movs	r1, #80	; 0x50
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb7a 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 800475c:	e02c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fb40 	bl	8004df0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2160      	movs	r1, #96	; 0x60
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fb6a 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 800477c:	e01c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 fb01 	bl	8004d92 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2140      	movs	r1, #64	; 0x40
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fb5a 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 fb51 	bl	8004e50 <TIM_ITRx_SetConfig>
      break;
 80047ae:	e003      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_SlaveConfigSynchro+0x18>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e031      	b.n	800484e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fa37 	bl	8004c70 <TIM_SlaveTimer_SetConfig>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e018      	b.n	800484e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800483a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a34      	ldr	r2, [pc, #208]	; (800493c <TIM_Base_SetConfig+0xe4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a31      	ldr	r2, [pc, #196]	; (8004940 <TIM_Base_SetConfig+0xe8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a30      	ldr	r2, [pc, #192]	; (8004944 <TIM_Base_SetConfig+0xec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <TIM_Base_SetConfig+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01b      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d017      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <TIM_Base_SetConfig+0xe8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a21      	ldr	r2, [pc, #132]	; (8004944 <TIM_Base_SetConfig+0xec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00f      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <TIM_Base_SetConfig+0xf4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <TIM_Base_SetConfig+0xf8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <TIM_Base_SetConfig+0xfc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d108      	bne.n	80048f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a08      	ldr	r2, [pc, #32]	; (800493c <TIM_Base_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800

08004958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <TIM_OC1_SetConfig+0xc8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d10c      	bne.n	80049ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0308 	bic.w	r3, r3, #8
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <TIM_OC1_SetConfig+0xc8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40010000 	.word	0x40010000

08004a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0210 	bic.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0320 	bic.w	r3, r3, #32
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <TIM_OC2_SetConfig+0xd4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10d      	bne.n	8004aa0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <TIM_OC2_SetConfig+0xd4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d113      	bne.n	8004ad0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <TIM_OC3_SetConfig+0xd0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <TIM_OC3_SetConfig+0xd0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d113      	bne.n	8004ba6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40010000 	.word	0x40010000

08004bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	031b      	lsls	r3, r3, #12
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <TIM_OC4_SetConfig+0x9c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d109      	bne.n	8004c44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	019b      	lsls	r3, r3, #6
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000

08004c70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b70      	cmp	r3, #112	; 0x70
 8004cb8:	d01a      	beq.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x80>
 8004cba:	2b70      	cmp	r3, #112	; 0x70
 8004cbc:	d860      	bhi.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
 8004cbe:	2b60      	cmp	r3, #96	; 0x60
 8004cc0:	d054      	beq.n	8004d6c <TIM_SlaveTimer_SetConfig+0xfc>
 8004cc2:	2b60      	cmp	r3, #96	; 0x60
 8004cc4:	d85c      	bhi.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
 8004cc6:	2b50      	cmp	r3, #80	; 0x50
 8004cc8:	d046      	beq.n	8004d58 <TIM_SlaveTimer_SetConfig+0xe8>
 8004cca:	2b50      	cmp	r3, #80	; 0x50
 8004ccc:	d858      	bhi.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d019      	beq.n	8004d06 <TIM_SlaveTimer_SetConfig+0x96>
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d854      	bhi.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
 8004cd6:	2b30      	cmp	r3, #48	; 0x30
 8004cd8:	d055      	beq.n	8004d86 <TIM_SlaveTimer_SetConfig+0x116>
 8004cda:	2b30      	cmp	r3, #48	; 0x30
 8004cdc:	d850      	bhi.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d051      	beq.n	8004d86 <TIM_SlaveTimer_SetConfig+0x116>
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d84c      	bhi.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d04d      	beq.n	8004d86 <TIM_SlaveTimer_SetConfig+0x116>
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d04b      	beq.n	8004d86 <TIM_SlaveTimer_SetConfig+0x116>
 8004cee:	e047      	b.n	8004d80 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68d9      	ldr	r1, [r3, #12]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f000 f8c1 	bl	8004e86 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004d04:	e040      	b.n	8004d88 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b05      	cmp	r3, #5
 8004d0c:	d101      	bne.n	8004d12 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e03b      	b.n	8004d8a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d38:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
      break;
 8004d56:	e017      	b.n	8004d88 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6899      	ldr	r1, [r3, #8]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	461a      	mov	r2, r3
 8004d66:	f000 f814 	bl	8004d92 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d6a:	e00d      	b.n	8004d88 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f000 f839 	bl	8004df0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d7e:	e003      	b.n	8004d88 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
      break;
 8004d84:	e000      	b.n	8004d88 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004d86:	bf00      	nop
  }

  return status;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f023 0201 	bic.w	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 030a 	bic.w	r3, r3, #10
 8004dce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0210 	bic.w	r2, r3, #16
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	031b      	lsls	r3, r3, #12
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	621a      	str	r2, [r3, #32]
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f043 0307 	orr.w	r3, r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	609a      	str	r2, [r3, #8]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2201      	movs	r2, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	401a      	ands	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1a      	ldr	r2, [r3, #32]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e050      	b.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f74:	d013      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a18      	ldr	r2, [pc, #96]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40014000 	.word	0x40014000

08004fec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fec:	b084      	sub	sp, #16
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	f107 001c 	add.w	r0, r7, #28
 8004ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2b01      	cmp	r3, #1
 8005002:	d122      	bne.n	800504a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800502c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d105      	bne.n	800503e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 fbee 	bl	8006820 <USB_CoreReset>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e01a      	b.n	8005080 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fbe2 	bl	8006820 <USB_CoreReset>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
 8005072:	e005      	b.n	8005080 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d10b      	bne.n	800509e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f043 0206 	orr.w	r2, r3, #6
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050aa:	b004      	add	sp, #16
 80050ac:	4770      	bx	lr
	...

080050b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d165      	bne.n	8005190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a41      	ldr	r2, [pc, #260]	; (80051cc <USB_SetTurnaroundTime+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d906      	bls.n	80050da <USB_SetTurnaroundTime+0x2a>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a40      	ldr	r2, [pc, #256]	; (80051d0 <USB_SetTurnaroundTime+0x120>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d202      	bcs.n	80050da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050d4:	230f      	movs	r3, #15
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e062      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a3c      	ldr	r2, [pc, #240]	; (80051d0 <USB_SetTurnaroundTime+0x120>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d306      	bcc.n	80050f0 <USB_SetTurnaroundTime+0x40>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a3b      	ldr	r2, [pc, #236]	; (80051d4 <USB_SetTurnaroundTime+0x124>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d202      	bcs.n	80050f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050ea:	230e      	movs	r3, #14
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e057      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a38      	ldr	r2, [pc, #224]	; (80051d4 <USB_SetTurnaroundTime+0x124>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d306      	bcc.n	8005106 <USB_SetTurnaroundTime+0x56>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a37      	ldr	r2, [pc, #220]	; (80051d8 <USB_SetTurnaroundTime+0x128>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d202      	bcs.n	8005106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005100:	230d      	movs	r3, #13
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e04c      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a33      	ldr	r2, [pc, #204]	; (80051d8 <USB_SetTurnaroundTime+0x128>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d306      	bcc.n	800511c <USB_SetTurnaroundTime+0x6c>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4a32      	ldr	r2, [pc, #200]	; (80051dc <USB_SetTurnaroundTime+0x12c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d802      	bhi.n	800511c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005116:	230c      	movs	r3, #12
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e041      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <USB_SetTurnaroundTime+0x12c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d906      	bls.n	8005132 <USB_SetTurnaroundTime+0x82>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a2e      	ldr	r2, [pc, #184]	; (80051e0 <USB_SetTurnaroundTime+0x130>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d802      	bhi.n	8005132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800512c:	230b      	movs	r3, #11
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e036      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <USB_SetTurnaroundTime+0x130>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d906      	bls.n	8005148 <USB_SetTurnaroundTime+0x98>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <USB_SetTurnaroundTime+0x134>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d802      	bhi.n	8005148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005142:	230a      	movs	r3, #10
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e02b      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <USB_SetTurnaroundTime+0x134>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d906      	bls.n	800515e <USB_SetTurnaroundTime+0xae>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <USB_SetTurnaroundTime+0x138>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d202      	bcs.n	800515e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005158:	2309      	movs	r3, #9
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e020      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <USB_SetTurnaroundTime+0x138>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d306      	bcc.n	8005174 <USB_SetTurnaroundTime+0xc4>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <USB_SetTurnaroundTime+0x13c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d802      	bhi.n	8005174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800516e:	2308      	movs	r3, #8
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e015      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <USB_SetTurnaroundTime+0x13c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d906      	bls.n	800518a <USB_SetTurnaroundTime+0xda>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <USB_SetTurnaroundTime+0x140>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d202      	bcs.n	800518a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005184:	2307      	movs	r3, #7
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e00a      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800518a:	2306      	movs	r3, #6
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e007      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005196:	2309      	movs	r3, #9
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e001      	b.n	80051a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800519c:	2309      	movs	r3, #9
 800519e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	029b      	lsls	r3, r3, #10
 80051b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051b8:	431a      	orrs	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	00d8acbf 	.word	0x00d8acbf
 80051d0:	00e4e1c0 	.word	0x00e4e1c0
 80051d4:	00f42400 	.word	0x00f42400
 80051d8:	01067380 	.word	0x01067380
 80051dc:	011a499f 	.word	0x011a499f
 80051e0:	01312cff 	.word	0x01312cff
 80051e4:	014ca43f 	.word	0x014ca43f
 80051e8:	016e3600 	.word	0x016e3600
 80051ec:	01a6ab1f 	.word	0x01a6ab1f
 80051f0:	01e84800 	.word	0x01e84800

080051f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f043 0201 	orr.w	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d115      	bne.n	8005286 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005266:	2001      	movs	r0, #1
 8005268:	f7fb ff12 	bl	8001090 <HAL_Delay>
      ms++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f001 fa45 	bl	8006702 <USB_GetMode>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d01e      	beq.n	80052bc <USB_SetCurrentMode+0x84>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b31      	cmp	r3, #49	; 0x31
 8005282:	d9f0      	bls.n	8005266 <USB_SetCurrentMode+0x2e>
 8005284:	e01a      	b.n	80052bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d115      	bne.n	80052b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005298:	2001      	movs	r0, #1
 800529a:	f7fb fef9 	bl	8001090 <HAL_Delay>
      ms++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 fa2c 	bl	8006702 <USB_GetMode>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <USB_SetCurrentMode+0x84>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b31      	cmp	r3, #49	; 0x31
 80052b4:	d9f0      	bls.n	8005298 <USB_SetCurrentMode+0x60>
 80052b6:	e001      	b.n	80052bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e005      	b.n	80052c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b32      	cmp	r3, #50	; 0x32
 80052c0:	d101      	bne.n	80052c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052d0:	b084      	sub	sp, #16
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	e009      	b.n	8005304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3340      	adds	r3, #64	; 0x40
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3301      	adds	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b0e      	cmp	r3, #14
 8005308:	d9f2      	bls.n	80052f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11c      	bne.n	800534a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531e:	f043 0302 	orr.w	r3, r3, #2
 8005322:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
 8005348:	e00b      	b.n	8005362 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	4619      	mov	r1, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	461a      	mov	r2, r3
 800537e:	680b      	ldr	r3, [r1, #0]
 8005380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f965 	bl	8005660 <USB_SetDevSpeed>
 8005396:	e008      	b.n	80053aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005398:	2101      	movs	r1, #1
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f960 	bl	8005660 <USB_SetDevSpeed>
 80053a0:	e003      	b.n	80053aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053a2:	2103      	movs	r1, #3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f95b 	bl	8005660 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053aa:	2110      	movs	r1, #16
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8f3 	bl	8005598 <USB_FlushTxFifo>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f91f 	bl	8005600 <USB_FlushRxFifo>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	461a      	mov	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e043      	b.n	800547e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d118      	bne.n	8005440 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e013      	b.n	8005452 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	461a      	mov	r2, r3
 8005438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e008      	b.n	8005452 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3301      	adds	r3, #1
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d3b7      	bcc.n	80053f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e043      	b.n	8005514 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800549e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a2:	d118      	bne.n	80054d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e013      	b.n	80054e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e008      	b.n	80054e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	2300      	movs	r3, #0
 80054e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800550c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3b7      	bcc.n	800548c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800553c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <USB_DevInit+0x2c4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 0208 	orr.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d107      	bne.n	8005584 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005590:	b004      	add	sp, #16
 8005592:	4770      	bx	lr
 8005594:	803c3800 	.word	0x803c3800

08005598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <USB_FlushTxFifo+0x64>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d901      	bls.n	80055b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e01b      	b.n	80055f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	daf2      	bge.n	80055a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	019b      	lsls	r3, r3, #6
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <USB_FlushTxFifo+0x64>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e006      	b.n	80055f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d0f0      	beq.n	80055d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	00030d40 	.word	0x00030d40

08005600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3301      	adds	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a11      	ldr	r2, [pc, #68]	; (800565c <USB_FlushRxFifo+0x5c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e018      	b.n	8005650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	daf2      	bge.n	800560c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2210      	movs	r2, #16
 800562e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <USB_FlushRxFifo+0x5c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e006      	b.n	8005650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d0f0      	beq.n	8005630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	00030d40 	.word	0x00030d40

08005660 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0306 	and.w	r3, r3, #6
 80056aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
 80056b6:	e00a      	b.n	80056ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d002      	beq.n	80056c4 <USB_GetDevSpeed+0x32>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b06      	cmp	r3, #6
 80056c2:	d102      	bne.n	80056ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056c4:	2302      	movs	r3, #2
 80056c6:	75fb      	strb	r3, [r7, #23]
 80056c8:	e001      	b.n	80056ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056ca:	230f      	movs	r3, #15
 80056cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d13a      	bne.n	800576e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	2101      	movs	r1, #1
 800570a:	fa01 f303 	lsl.w	r3, r1, r3
 800570e:	b29b      	uxth	r3, r3
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005716:	4313      	orrs	r3, r2
 8005718:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d155      	bne.n	80057dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	791b      	ldrb	r3, [r3, #4]
 800574a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800574c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	059b      	lsls	r3, r3, #22
 8005752:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005754:	4313      	orrs	r3, r2
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e036      	b.n	80057dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578c:	4313      	orrs	r3, r2
 800578e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d11a      	bne.n	80057dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	791b      	ldrb	r3, [r3, #4]
 80057c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057c2:	430b      	orrs	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d161      	bne.n	80058cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800581e:	d11f      	bne.n	8005860 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800583e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2101      	movs	r1, #1
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005880:	4013      	ands	r3, r2
 8005882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	b29b      	uxth	r3, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4013      	ands	r3, r2
 80058a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	0159      	lsls	r1, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	440b      	add	r3, r1
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	4619      	mov	r1, r3
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <USB_DeactivateEndpoint+0x1b0>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
 80058ca:	e060      	b.n	800598e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e2:	d11f      	bne.n	8005924 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005902:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	43db      	mvns	r3, r3
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4013      	ands	r3, r2
 8005946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	0159      	lsls	r1, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	440b      	add	r3, r1
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	4619      	mov	r1, r3
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <USB_DeactivateEndpoint+0x1b4>)
 800598a:	4013      	ands	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	ec337800 	.word	0xec337800
 80059a0:	eff37800 	.word	0xeff37800

080059a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	f040 815c 	bne.w	8005c7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d132      	bne.n	8005a34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2c:	0cdb      	lsrs	r3, r3, #19
 8005a2e:	04db      	lsls	r3, r3, #19
 8005a30:	6113      	str	r3, [r2, #16]
 8005a32:	e074      	b.n	8005b1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	0cdb      	lsrs	r3, r3, #19
 8005a50:	04db      	lsls	r3, r3, #19
 8005a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6999      	ldr	r1, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	440b      	add	r3, r1
 8005a90:	1e59      	subs	r1, r3, #1
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a9c:	4b9d      	ldr	r3, [pc, #628]	; (8005d14 <USB_EPStartXfer+0x370>)
 8005a9e:	400b      	ands	r3, r1
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	0148      	lsls	r0, r1, #5
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aac:	4313      	orrs	r3, r2
 8005aae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac6:	69b9      	ldr	r1, [r7, #24]
 8005ac8:	0148      	lsls	r0, r1, #5
 8005aca:	69f9      	ldr	r1, [r7, #28]
 8005acc:	4401      	add	r1, r0
 8005ace:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	791b      	ldrb	r3, [r3, #4]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11f      	bne.n	8005b1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005afc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d14b      	bne.n	8005bbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	791b      	ldrb	r3, [r3, #4]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d128      	bne.n	8005b9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d110      	bne.n	8005b7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e00f      	b.n	8005b9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e133      	b.n	8005e24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d015      	beq.n	8005c10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 811b 	beq.w	8005e24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	634b      	str	r3, [r1, #52]	; 0x34
 8005c0e:	e109      	b.n	8005e24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d110      	bne.n	8005c42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	e00f      	b.n	8005c62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6919      	ldr	r1, [r3, #16]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	b298      	uxth	r0, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fade 	bl	8006238 <USB_WritePacket>
 8005c7c:	e0d2      	b.n	8005e24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c98:	0cdb      	lsrs	r3, r3, #19
 8005c9a:	04db      	lsls	r3, r3, #19
 8005c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d126      	bne.n	8005d18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce0:	69b9      	ldr	r1, [r7, #24]
 8005ce2:	0148      	lsls	r0, r1, #5
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	4401      	add	r1, r0
 8005ce8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cec:	4313      	orrs	r3, r2
 8005cee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0e:	6113      	str	r3, [r2, #16]
 8005d10:	e03a      	b.n	8005d88 <USB_EPStartXfer+0x3e4>
 8005d12:	bf00      	nop
 8005d14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	1e5a      	subs	r2, r3, #1
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	8afa      	ldrh	r2, [r7, #22]
 8005d34:	fb03 f202 	mul.w	r2, r3, r2
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	04d9      	lsls	r1, r3, #19
 8005d4e:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <USB_EPStartXfer+0x48c>)
 8005d50:	400b      	ands	r3, r1
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	0148      	lsls	r0, r1, #5
 8005d56:	69f9      	ldr	r1, [r7, #28]
 8005d58:	4401      	add	r1, r0
 8005d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	0148      	lsls	r0, r1, #5
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	4401      	add	r1, r0
 8005d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d84:	4313      	orrs	r3, r2
 8005d86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10d      	bne.n	8005daa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6919      	ldr	r1, [r3, #16]
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	460a      	mov	r2, r1
 8005da8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d128      	bne.n	8005e04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d110      	bne.n	8005de4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e00f      	b.n	8005e04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	1ff80000 	.word	0x1ff80000

08005e34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 80ce 	bne.w	8005ff2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d132      	bne.n	8005ec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	0cdb      	lsrs	r3, r3, #19
 8005ebe:	04db      	lsls	r3, r3, #19
 8005ec0:	6113      	str	r3, [r2, #16]
 8005ec2:	e04e      	b.n	8005f62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	0cdb      	lsrs	r3, r3, #19
 8005ee0:	04db      	lsls	r3, r3, #19
 8005ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	0148      	lsls	r0, r1, #5
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	4401      	add	r1, r0
 8005f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d11e      	bne.n	8005fa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e097      	b.n	80060d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8083 	beq.w	80060d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	6979      	ldr	r1, [r7, #20]
 8005fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fec:	4313      	orrs	r3, r2
 8005fee:	634b      	str	r3, [r1, #52]	; 0x34
 8005ff0:	e071      	b.n	80060d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600c:	0cdb      	lsrs	r3, r3, #19
 800600e:	04db      	lsls	r3, r3, #19
 8006010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800606c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	0148      	lsls	r0, r1, #5
 8006088:	6979      	ldr	r1, [r7, #20]
 800608a:	4401      	add	r1, r0
 800608c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006090:	4313      	orrs	r3, r2
 8006092:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10d      	bne.n	80060b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6919      	ldr	r1, [r3, #16]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	460a      	mov	r2, r1
 80060b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d14a      	bne.n	8006198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611a:	f040 8086 	bne.w	800622a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	7812      	ldrb	r2, [r2, #0]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006172:	4293      	cmp	r3, r2
 8006174:	d902      	bls.n	800617c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
          break;
 800617a:	e056      	b.n	800622a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006194:	d0e7      	beq.n	8006166 <USB_EPStopXfer+0x82>
 8006196:	e048      	b.n	800622a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b0:	d13b      	bne.n	800622a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f242 7210 	movw	r2, #10000	; 0x2710
 8006206:	4293      	cmp	r3, r2
 8006208:	d902      	bls.n	8006210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
          break;
 800620e:	e00c      	b.n	800622a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006228:	d0e7      	beq.n	80061fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
}
 800622c:	4618      	mov	r0, r3
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4611      	mov	r1, r2
 8006244:	461a      	mov	r2, r3
 8006246:	460b      	mov	r3, r1
 8006248:	71fb      	strb	r3, [r7, #7]
 800624a:	4613      	mov	r3, r2
 800624c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d123      	bne.n	80062a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800625e:	88bb      	ldrh	r3, [r7, #4]
 8006260:	3303      	adds	r3, #3
 8006262:	089b      	lsrs	r3, r3, #2
 8006264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e018      	b.n	800629e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	031a      	lsls	r2, r3, #12
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006278:	461a      	mov	r2, r3
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3301      	adds	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	3301      	adds	r3, #1
 8006290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	3301      	adds	r3, #1
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3e2      	bcc.n	800626c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3724      	adds	r7, #36	; 0x24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b08b      	sub	sp, #44	; 0x2c
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	089b      	lsrs	r3, r3, #2
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062da:	2300      	movs	r3, #0
 80062dc:	623b      	str	r3, [r7, #32]
 80062de:	e014      	b.n	800630a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	3301      	adds	r3, #1
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	3301      	adds	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	3301      	adds	r3, #1
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	3301      	adds	r3, #1
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	3301      	adds	r3, #1
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	6a3a      	ldr	r2, [r7, #32]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	429a      	cmp	r2, r3
 8006310:	d3e6      	bcc.n	80062e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006312:	8bfb      	ldrh	r3, [r7, #30]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01e      	beq.n	8006356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	461a      	mov	r2, r3
 8006324:	f107 0310 	add.w	r3, r7, #16
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	fa22 f303 	lsr.w	r3, r2, r3
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	701a      	strb	r2, [r3, #0]
      i++;
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	3301      	adds	r3, #1
 8006342:	623b      	str	r3, [r7, #32]
      pDest++;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	3301      	adds	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800634a:	8bfb      	ldrh	r3, [r7, #30]
 800634c:	3b01      	subs	r3, #1
 800634e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006350:	8bfb      	ldrh	r3, [r7, #30]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ea      	bne.n	800632c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006358:	4618      	mov	r0, r3
 800635a:	372c      	adds	r7, #44	; 0x2c
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d12c      	bne.n	80063da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	db12      	blt.n	80063b8 <USB_EPSetStall+0x54>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00f      	beq.n	80063b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e02b      	b.n	8006432 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	db12      	blt.n	8006412 <USB_EPSetStall+0xae>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006410:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d128      	bne.n	80064ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800647a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	791b      	ldrb	r3, [r3, #4]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d003      	beq.n	800648c <USB_EPClearStall+0x4c>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	791b      	ldrb	r3, [r3, #4]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d138      	bne.n	80064fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e027      	b.n	80064fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d003      	beq.n	80064de <USB_EPClearStall+0x9e>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	791b      	ldrb	r3, [r3, #4]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d10f      	bne.n	80064fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800652e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006540:	68f9      	ldr	r1, [r7, #12]
 8006542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006586:	f023 0302 	bic.w	r3, r3, #2
 800658a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065b4:	f023 0303 	bic.w	r3, r3, #3
 80065b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4013      	ands	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065f4:	68fb      	ldr	r3, [r7, #12]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	0c1b      	lsrs	r3, r3, #16
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	4013      	ands	r3, r2
 8006658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	b29b      	uxth	r3, r3
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006698:	68bb      	ldr	r3, [r7, #8]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b087      	sub	sp, #28
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	01db      	lsls	r3, r3, #7
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4013      	ands	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066f4:	68bb      	ldr	r3, [r7, #8]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 0301 	and.w	r3, r3, #1
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800673c:	f023 0307 	bic.w	r3, r3, #7
 8006740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	460b      	mov	r3, r1
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	333c      	adds	r3, #60	; 0x3c
 800677a:	3304      	adds	r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4a26      	ldr	r2, [pc, #152]	; (800681c <USB_EP0_OutStart+0xb8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d90a      	bls.n	800679e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006798:	d101      	bne.n	800679e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e037      	b.n	800680e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	f043 0318 	orr.w	r3, r3, #24
 80067d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10f      	bne.n	800680c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800680a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	4f54300a 	.word	0x4f54300a

08006820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a13      	ldr	r2, [pc, #76]	; (8006884 <USB_CoreReset+0x64>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e01b      	b.n	8006876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	daf2      	bge.n	800682c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a09      	ldr	r2, [pc, #36]	; (8006884 <USB_CoreReset+0x64>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d0f0      	beq.n	8006856 <USB_CoreReset+0x36>

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	00030d40 	.word	0x00030d40

08006888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006894:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006898:	f002 fc94 	bl	80091c4 <USBD_static_malloc>
 800689c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32b0      	adds	r2, #176	; 0xb0
 80068ae:	2100      	movs	r1, #0
 80068b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0d4      	b.n	8006a62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80068bc:	2100      	movs	r1, #0
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f002 fce8 	bl	8009294 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32b0      	adds	r2, #176	; 0xb0
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32b0      	adds	r2, #176	; 0xb0
 80068de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7c1b      	ldrb	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d138      	bne.n	8006962 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068f0:	4b5e      	ldr	r3, [pc, #376]	; (8006a6c <USBD_CDC_Init+0x1e4>)
 80068f2:	7819      	ldrb	r1, [r3, #0]
 80068f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f8:	2202      	movs	r2, #2
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f002 fb3f 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006900:	4b5a      	ldr	r3, [pc, #360]	; (8006a6c <USBD_CDC_Init+0x1e4>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	f003 020f 	and.w	r2, r3, #15
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	3324      	adds	r3, #36	; 0x24
 8006916:	2201      	movs	r2, #1
 8006918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800691a:	4b55      	ldr	r3, [pc, #340]	; (8006a70 <USBD_CDC_Init+0x1e8>)
 800691c:	7819      	ldrb	r1, [r3, #0]
 800691e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006922:	2202      	movs	r2, #2
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f002 fb2a 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800692a:	4b51      	ldr	r3, [pc, #324]	; (8006a70 <USBD_CDC_Init+0x1e8>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 020f 	and.w	r2, r3, #15
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006942:	2201      	movs	r2, #1
 8006944:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006946:	4b4b      	ldr	r3, [pc, #300]	; (8006a74 <USBD_CDC_Init+0x1ec>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	3326      	adds	r3, #38	; 0x26
 800695c:	2210      	movs	r2, #16
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	e035      	b.n	80069ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006962:	4b42      	ldr	r3, [pc, #264]	; (8006a6c <USBD_CDC_Init+0x1e4>)
 8006964:	7819      	ldrb	r1, [r3, #0]
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	2202      	movs	r2, #2
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f002 fb07 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006970:	4b3e      	ldr	r3, [pc, #248]	; (8006a6c <USBD_CDC_Init+0x1e4>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	3324      	adds	r3, #36	; 0x24
 8006986:	2201      	movs	r2, #1
 8006988:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800698a:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <USBD_CDC_Init+0x1e8>)
 800698c:	7819      	ldrb	r1, [r3, #0]
 800698e:	2340      	movs	r3, #64	; 0x40
 8006990:	2202      	movs	r2, #2
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f002 faf3 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006998:	4b35      	ldr	r3, [pc, #212]	; (8006a70 <USBD_CDC_Init+0x1e8>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069b0:	2201      	movs	r2, #1
 80069b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069b4:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <USBD_CDC_Init+0x1ec>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 020f 	and.w	r2, r3, #15
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	3326      	adds	r3, #38	; 0x26
 80069ca:	2210      	movs	r2, #16
 80069cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ce:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <USBD_CDC_Init+0x1ec>)
 80069d0:	7819      	ldrb	r1, [r3, #0]
 80069d2:	2308      	movs	r3, #8
 80069d4:	2203      	movs	r2, #3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f002 fad1 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069dc:	4b25      	ldr	r3, [pc, #148]	; (8006a74 <USBD_CDC_Init+0x1ec>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	3324      	adds	r3, #36	; 0x24
 80069f2:	2201      	movs	r2, #1
 80069f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	33b0      	adds	r3, #176	; 0xb0
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e018      	b.n	8006a62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7c1b      	ldrb	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <USBD_CDC_Init+0x1e8>)
 8006a3a:	7819      	ldrb	r1, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f002 fb88 	bl	800915c <USBD_LL_PrepareReceive>
 8006a4c:	e008      	b.n	8006a60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <USBD_CDC_Init+0x1e8>)
 8006a50:	7819      	ldrb	r1, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f002 fb7e 	bl	800915c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000093 	.word	0x20000093
 8006a70:	20000094 	.word	0x20000094
 8006a74:	20000095 	.word	0x20000095

08006a78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a84:	4b3a      	ldr	r3, [pc, #232]	; (8006b70 <USBD_CDC_DeInit+0xf8>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f002 fa9d 	bl	8008fca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a90:	4b37      	ldr	r3, [pc, #220]	; (8006b70 <USBD_CDC_DeInit+0xf8>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3324      	adds	r3, #36	; 0x24
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006aaa:	4b32      	ldr	r3, [pc, #200]	; (8006b74 <USBD_CDC_DeInit+0xfc>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f002 fa8a 	bl	8008fca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ab6:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <USBD_CDC_DeInit+0xfc>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ace:	2200      	movs	r2, #0
 8006ad0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ad2:	4b29      	ldr	r3, [pc, #164]	; (8006b78 <USBD_CDC_DeInit+0x100>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f002 fa76 	bl	8008fca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ade:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <USBD_CDC_DeInit+0x100>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3324      	adds	r3, #36	; 0x24
 8006af4:	2200      	movs	r2, #0
 8006af6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006af8:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <USBD_CDC_DeInit+0x100>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3326      	adds	r3, #38	; 0x26
 8006b0e:	2200      	movs	r2, #0
 8006b10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	32b0      	adds	r2, #176	; 0xb0
 8006b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01f      	beq.n	8006b64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	33b0      	adds	r3, #176	; 0xb0
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32b0      	adds	r2, #176	; 0xb0
 8006b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f002 fb4a 	bl	80091e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	32b0      	adds	r2, #176	; 0xb0
 8006b56:	2100      	movs	r1, #0
 8006b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000093 	.word	0x20000093
 8006b74:	20000094 	.word	0x20000094
 8006b78:	20000095 	.word	0x20000095

08006b7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	32b0      	adds	r2, #176	; 0xb0
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e0bf      	b.n	8006d2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d050      	beq.n	8006c5a <USBD_CDC_Setup+0xde>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	f040 80af 	bne.w	8006d1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d03a      	beq.n	8006c3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b25b      	sxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da1b      	bge.n	8006c08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	33b0      	adds	r3, #176	; 0xb0
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006be6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	88d2      	ldrh	r2, [r2, #6]
 8006bec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	88db      	ldrh	r3, [r3, #6]
 8006bf2:	2b07      	cmp	r3, #7
 8006bf4:	bf28      	it	cs
 8006bf6:	2307      	movcs	r3, #7
 8006bf8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	89fa      	ldrh	r2, [r7, #14]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fd89 	bl	8008718 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c06:	e090      	b.n	8006d2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	785a      	ldrb	r2, [r3, #1]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	88db      	ldrh	r3, [r3, #6]
 8006c16:	2b3f      	cmp	r3, #63	; 0x3f
 8006c18:	d803      	bhi.n	8006c22 <USBD_CDC_Setup+0xa6>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	e000      	b.n	8006c24 <USBD_CDC_Setup+0xa8>
 8006c22:	2240      	movs	r2, #64	; 0x40
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c2a:	6939      	ldr	r1, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006c32:	461a      	mov	r2, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fd9b 	bl	8008770 <USBD_CtlPrepareRx>
      break;
 8006c3a:	e076      	b.n	8006d2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	33b0      	adds	r3, #176	; 0xb0
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	7850      	ldrb	r0, [r2, #1]
 8006c52:	2200      	movs	r2, #0
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	4798      	blx	r3
      break;
 8006c58:	e067      	b.n	8006d2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b0b      	cmp	r3, #11
 8006c60:	d851      	bhi.n	8006d06 <USBD_CDC_Setup+0x18a>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <USBD_CDC_Setup+0xec>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c99 	.word	0x08006c99
 8006c6c:	08006d15 	.word	0x08006d15
 8006c70:	08006d07 	.word	0x08006d07
 8006c74:	08006d07 	.word	0x08006d07
 8006c78:	08006d07 	.word	0x08006d07
 8006c7c:	08006d07 	.word	0x08006d07
 8006c80:	08006d07 	.word	0x08006d07
 8006c84:	08006d07 	.word	0x08006d07
 8006c88:	08006d07 	.word	0x08006d07
 8006c8c:	08006d07 	.word	0x08006d07
 8006c90:	08006cc3 	.word	0x08006cc3
 8006c94:	08006ced 	.word	0x08006ced
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d107      	bne.n	8006cb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ca4:	f107 030a 	add.w	r3, r7, #10
 8006ca8:	2202      	movs	r2, #2
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fd33 	bl	8008718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cb2:	e032      	b.n	8006d1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fcbd 	bl	8008636 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8006cc0:	e02b      	b.n	8006d1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d107      	bne.n	8006cde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cce:	f107 030d 	add.w	r3, r7, #13
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fd1e 	bl	8008718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cdc:	e01d      	b.n	8006d1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fca8 	bl	8008636 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cea:	e016      	b.n	8006d1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d00f      	beq.n	8006d18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 fc9b 	bl	8008636 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d00:	2303      	movs	r3, #3
 8006d02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d04:	e008      	b.n	8006d18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fc94 	bl	8008636 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	75fb      	strb	r3, [r7, #23]
          break;
 8006d12:	e002      	b.n	8006d1a <USBD_CDC_Setup+0x19e>
          break;
 8006d14:	bf00      	nop
 8006d16:	e008      	b.n	8006d2a <USBD_CDC_Setup+0x1ae>
          break;
 8006d18:	bf00      	nop
      }
      break;
 8006d1a:	e006      	b.n	8006d2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fc89 	bl	8008636 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d24:	2303      	movs	r3, #3
 8006d26:	75fb      	strb	r3, [r7, #23]
      break;
 8006d28:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	32b0      	adds	r2, #176	; 0xb0
 8006d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e065      	b.n	8006e2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	32b0      	adds	r2, #176	; 0xb0
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	f003 020f 	and.w	r2, r3, #15
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	3318      	adds	r3, #24
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d02f      	beq.n	8006de8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3318      	adds	r3, #24
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	f003 010f 	and.w	r1, r3, #15
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	460b      	mov	r3, r1
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	440b      	add	r3, r1
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4403      	add	r3, r0
 8006db0:	3348      	adds	r3, #72	; 0x48
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d112      	bne.n	8006de8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 020f 	and.w	r2, r3, #15
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dda:	78f9      	ldrb	r1, [r7, #3]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f002 f99a 	bl	800911a <USBD_LL_Transmit>
 8006de6:	e01f      	b.n	8006e28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	33b0      	adds	r3, #176	; 0xb0
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d010      	beq.n	8006e28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	33b0      	adds	r3, #176	; 0xb0
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32b0      	adds	r2, #176	; 0xb0
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	32b0      	adds	r2, #176	; 0xb0
 8006e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e01a      	b.n	8006e9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f002 f998 	bl	800919e <USBD_LL_GetRxDataSize>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	33b0      	adds	r3, #176	; 0xb0
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e94:	4611      	mov	r1, r2
 8006e96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	32b0      	adds	r2, #176	; 0xb0
 8006eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e025      	b.n	8006f10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	33b0      	adds	r3, #176	; 0xb0
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01a      	beq.n	8006f0e <USBD_CDC_EP0_RxReady+0x6c>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ede:	2bff      	cmp	r3, #255	; 0xff
 8006ee0:	d015      	beq.n	8006f0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	33b0      	adds	r3, #176	; 0xb0
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006efa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f02:	b292      	uxth	r2, r2
 8006f04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	22ff      	movs	r2, #255	; 0xff
 8006f0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f20:	2182      	movs	r1, #130	; 0x82
 8006f22:	4818      	ldr	r0, [pc, #96]	; (8006f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f24:	f000 fd4f 	bl	80079c6 <USBD_GetEpDesc>
 8006f28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4815      	ldr	r0, [pc, #84]	; (8006f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f2e:	f000 fd4a 	bl	80079c6 <USBD_GetEpDesc>
 8006f32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f34:	2181      	movs	r1, #129	; 0x81
 8006f36:	4813      	ldr	r0, [pc, #76]	; (8006f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f38:	f000 fd45 	bl	80079c6 <USBD_GetEpDesc>
 8006f3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2210      	movs	r2, #16
 8006f48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f58:	711a      	strb	r2, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d006      	beq.n	8006f72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f6c:	711a      	strb	r2, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2243      	movs	r2, #67	; 0x43
 8006f76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000050 	.word	0x20000050

08006f88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f90:	2182      	movs	r1, #130	; 0x82
 8006f92:	4818      	ldr	r0, [pc, #96]	; (8006ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f94:	f000 fd17 	bl	80079c6 <USBD_GetEpDesc>
 8006f98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	4815      	ldr	r0, [pc, #84]	; (8006ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f9e:	f000 fd12 	bl	80079c6 <USBD_GetEpDesc>
 8006fa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fa4:	2181      	movs	r1, #129	; 0x81
 8006fa6:	4813      	ldr	r0, [pc, #76]	; (8006ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fa8:	f000 fd0d 	bl	80079c6 <USBD_GetEpDesc>
 8006fac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d006      	beq.n	8006fce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	711a      	strb	r2, [r3, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f042 0202 	orr.w	r2, r2, #2
 8006fcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d006      	beq.n	8006fe2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	711a      	strb	r2, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f042 0202 	orr.w	r2, r2, #2
 8006fe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2243      	movs	r2, #67	; 0x43
 8006fe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fe8:	4b02      	ldr	r3, [pc, #8]	; (8006ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000050 	.word	0x20000050

08006ff8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007000:	2182      	movs	r1, #130	; 0x82
 8007002:	4818      	ldr	r0, [pc, #96]	; (8007064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007004:	f000 fcdf 	bl	80079c6 <USBD_GetEpDesc>
 8007008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800700a:	2101      	movs	r1, #1
 800700c:	4815      	ldr	r0, [pc, #84]	; (8007064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800700e:	f000 fcda 	bl	80079c6 <USBD_GetEpDesc>
 8007012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007014:	2181      	movs	r1, #129	; 0x81
 8007016:	4813      	ldr	r0, [pc, #76]	; (8007064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007018:	f000 fcd5 	bl	80079c6 <USBD_GetEpDesc>
 800701c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2210      	movs	r2, #16
 8007028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2200      	movs	r2, #0
 8007034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007038:	711a      	strb	r2, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800704c:	711a      	strb	r2, [r3, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2243      	movs	r2, #67	; 0x43
 8007056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000050 	.word	0x20000050

08007068 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	220a      	movs	r2, #10
 8007074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007076:	4b03      	ldr	r3, [pc, #12]	; (8007084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	2000000c 	.word	0x2000000c

08007088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007098:	2303      	movs	r3, #3
 800709a:	e009      	b.n	80070b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	33b0      	adds	r3, #176	; 0xb0
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	32b0      	adds	r2, #176	; 0xb0
 80070d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070de:	2303      	movs	r3, #3
 80070e0:	e008      	b.n	80070f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	32b0      	adds	r2, #176	; 0xb0
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e004      	b.n	800712e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	32b0      	adds	r2, #176	; 0xb0
 800714e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007152:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007154:	2301      	movs	r3, #1
 8007156:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	32b0      	adds	r2, #176	; 0xb0
 8007162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800716a:	2303      	movs	r3, #3
 800716c:	e025      	b.n	80071ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11f      	bne.n	80071b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2201      	movs	r2, #1
 800717c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007180:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <USBD_CDC_TransmitPacket+0x88>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 020f 	and.w	r2, r3, #15
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4403      	add	r3, r0
 800719a:	3318      	adds	r3, #24
 800719c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <USBD_CDC_TransmitPacket+0x88>)
 80071a0:	7819      	ldrb	r1, [r3, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 ffb3 	bl	800911a <USBD_LL_Transmit>

    ret = USBD_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000093 	.word	0x20000093

080071c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32b0      	adds	r2, #176	; 0xb0
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32b0      	adds	r2, #176	; 0xb0
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e018      	b.n	8007228 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7c1b      	ldrb	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <USBD_CDC_ReceivePacket+0x68>)
 8007200:	7819      	ldrb	r1, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 ffa5 	bl	800915c <USBD_LL_PrepareReceive>
 8007212:	e008      	b.n	8007226 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <USBD_CDC_ReceivePacket+0x68>)
 8007216:	7819      	ldrb	r1, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800721e:	2340      	movs	r3, #64	; 0x40
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 ff9b 	bl	800915c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000094 	.word	0x20000094

08007234 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	e01f      	b.n	800728c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	79fa      	ldrb	r2, [r7, #7]
 800727e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f001 fe15 	bl	8008eb0 <USBD_LL_Init>
 8007286:	4603      	mov	r3, r0
 8007288:	75fb      	strb	r3, [r7, #23]

  return ret;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e025      	b.n	80072f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32ae      	adds	r2, #174	; 0xae
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00f      	beq.n	80072e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	; 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	f107 020e 	add.w	r2, r7, #14
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	4602      	mov	r2, r0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fe1d 	bl	8008f48 <USBD_LL_Start>
 800730e:	4603      	mov	r3, r0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007320:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d009      	beq.n	800735c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	4611      	mov	r1, r2
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800738c:	2303      	movs	r3, #3
 800738e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 f908 	bl	80085c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d01a      	beq.n	800740c <USBD_LL_SetupStage+0x72>
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d822      	bhi.n	8007420 <USBD_LL_SetupStage+0x86>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <USBD_LL_SetupStage+0x4a>
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d00a      	beq.n	80073f8 <USBD_LL_SetupStage+0x5e>
 80073e2:	e01d      	b.n	8007420 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb5f 	bl	8007ab0 <USBD_StdDevReq>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]
      break;
 80073f6:	e020      	b.n	800743a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fbc7 	bl	8007b94 <USBD_StdItfReq>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
      break;
 800740a:	e016      	b.n	800743a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc29 	bl	8007c6c <USBD_StdEPReq>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
      break;
 800741e:	e00c      	b.n	800743a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007426:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fdea 	bl	8009008 <USBD_LL_StallEP>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
      break;
 8007438:	bf00      	nop
  }

  return ret;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	460b      	mov	r3, r1
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d16e      	bne.n	800753a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800746a:	2b03      	cmp	r3, #3
 800746c:	f040 8098 	bne.w	80075a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	429a      	cmp	r2, r3
 800747a:	d913      	bls.n	80074a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	1ad2      	subs	r2, r2, r3
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	4293      	cmp	r3, r2
 8007494:	bf28      	it	cs
 8007496:	4613      	movcs	r3, r2
 8007498:	461a      	mov	r2, r3
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f001 f984 	bl	80087aa <USBD_CtlContinueRx>
 80074a2:	e07d      	b.n	80075a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d014      	beq.n	80074dc <USBD_LL_DataOutStage+0x98>
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d81d      	bhi.n	80074f2 <USBD_LL_DataOutStage+0xae>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <USBD_LL_DataOutStage+0x7c>
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d003      	beq.n	80074c6 <USBD_LL_DataOutStage+0x82>
 80074be:	e018      	b.n	80074f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75bb      	strb	r3, [r7, #22]
            break;
 80074c4:	e018      	b.n	80074f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa5e 	bl	8007992 <USBD_CoreFindIF>
 80074d6:	4603      	mov	r3, r0
 80074d8:	75bb      	strb	r3, [r7, #22]
            break;
 80074da:	e00d      	b.n	80074f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 fa60 	bl	80079ac <USBD_CoreFindEP>
 80074ec:	4603      	mov	r3, r0
 80074ee:	75bb      	strb	r3, [r7, #22]
            break;
 80074f0:	e002      	b.n	80074f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75bb      	strb	r3, [r7, #22]
            break;
 80074f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80074f8:	7dbb      	ldrb	r3, [r7, #22]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d119      	bne.n	8007532 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b03      	cmp	r3, #3
 8007508:	d113      	bne.n	8007532 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800750a:	7dba      	ldrb	r2, [r7, #22]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	32ae      	adds	r2, #174	; 0xae
 8007510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800751a:	7dba      	ldrb	r2, [r7, #22]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007522:	7dba      	ldrb	r2, [r7, #22]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	32ae      	adds	r2, #174	; 0xae
 8007528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f001 f94a 	bl	80087cc <USBD_CtlSendStatus>
 8007538:	e032      	b.n	80075a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007540:	b2db      	uxtb	r3, r3
 8007542:	4619      	mov	r1, r3
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fa31 	bl	80079ac <USBD_CoreFindEP>
 800754a:	4603      	mov	r3, r0
 800754c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800754e:	7dbb      	ldrb	r3, [r7, #22]
 8007550:	2bff      	cmp	r3, #255	; 0xff
 8007552:	d025      	beq.n	80075a0 <USBD_LL_DataOutStage+0x15c>
 8007554:	7dbb      	ldrb	r3, [r7, #22]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d122      	bne.n	80075a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b03      	cmp	r3, #3
 8007564:	d117      	bne.n	8007596 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007566:	7dba      	ldrb	r2, [r7, #22]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	32ae      	adds	r2, #174	; 0xae
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00f      	beq.n	8007596 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007576:	7dba      	ldrb	r2, [r7, #22]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800757e:	7dba      	ldrb	r2, [r7, #22]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	32ae      	adds	r2, #174	; 0xae
 8007584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	7afa      	ldrb	r2, [r7, #11]
 800758c:	4611      	mov	r1, r2
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	4798      	blx	r3
 8007592:	4603      	mov	r3, r0
 8007594:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	e000      	b.n	80075a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b086      	sub	sp, #24
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	460b      	mov	r3, r1
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d16f      	bne.n	800769e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3314      	adds	r3, #20
 80075c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d15a      	bne.n	8007684 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d914      	bls.n	8007604 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	461a      	mov	r2, r3
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f001 f8ac 	bl	800874e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075f6:	2300      	movs	r3, #0
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f001 fdad 	bl	800915c <USBD_LL_PrepareReceive>
 8007602:	e03f      	b.n	8007684 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	429a      	cmp	r2, r3
 800760e:	d11c      	bne.n	800764a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007618:	429a      	cmp	r2, r3
 800761a:	d316      	bcc.n	800764a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007626:	429a      	cmp	r2, r3
 8007628:	d20f      	bcs.n	800764a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f001 f88d 	bl	800874e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800763c:	2300      	movs	r3, #0
 800763e:	2200      	movs	r2, #0
 8007640:	2100      	movs	r1, #0
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f001 fd8a 	bl	800915c <USBD_LL_PrepareReceive>
 8007648:	e01c      	b.n	8007684 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b03      	cmp	r3, #3
 8007654:	d10f      	bne.n	8007676 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007676:	2180      	movs	r1, #128	; 0x80
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 fcc5 	bl	8009008 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 f8b7 	bl	80087f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d03a      	beq.n	8007704 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fe42 	bl	8007318 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800769c:	e032      	b.n	8007704 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f97f 	bl	80079ac <USBD_CoreFindEP>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	2bff      	cmp	r3, #255	; 0xff
 80076b6:	d025      	beq.n	8007704 <USBD_LL_DataInStage+0x15a>
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d122      	bne.n	8007704 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d11c      	bne.n	8007704 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076ca:	7dfa      	ldrb	r2, [r7, #23]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	32ae      	adds	r2, #174	; 0xae
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d014      	beq.n	8007704 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80076da:	7dfa      	ldrb	r2, [r7, #23]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076e2:	7dfa      	ldrb	r2, [r7, #23]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	32ae      	adds	r2, #174	; 0xae
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	7afa      	ldrb	r2, [r7, #11]
 80076f0:	4611      	mov	r1, r2
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	4798      	blx	r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80076fa:	7dbb      	ldrb	r3, [r7, #22]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007700:	7dbb      	ldrb	r3, [r7, #22]
 8007702:	e000      	b.n	8007706 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d014      	beq.n	8007774 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6852      	ldr	r2, [r2, #4]
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	4611      	mov	r1, r2
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007770:	2303      	movs	r3, #3
 8007772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fbff 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2240      	movs	r2, #64	; 0x40
 800778c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	2200      	movs	r2, #0
 8007794:	2180      	movs	r1, #128	; 0x80
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 fbf1 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2240      	movs	r2, #64	; 0x40
 80077a6:	621a      	str	r2, [r3, #32]

  return ret;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	460b      	mov	r3, r1
 80077bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2204      	movs	r2, #4
 80077ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b04      	cmp	r3, #4
 8007810:	d106      	bne.n	8007820 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007818:	b2da      	uxtb	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b03      	cmp	r3, #3
 8007840:	d110      	bne.n	8007864 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	32ae      	adds	r2, #174	; 0xae
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	e01c      	b.n	80078ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b03      	cmp	r3, #3
 800789a:	d115      	bne.n	80078c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32ae      	adds	r2, #174	; 0xae
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	32ae      	adds	r2, #174	; 0xae
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	4611      	mov	r1, r2
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	32ae      	adds	r2, #174	; 0xae
 80078e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e01c      	b.n	800792e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d115      	bne.n	800792c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32ae      	adds	r2, #174	; 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	32ae      	adds	r2, #174	; 0xae
 800791e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	4611      	mov	r1, r2
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00e      	beq.n	8007988 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6852      	ldr	r2, [r2, #4]
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	4611      	mov	r1, r2
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800799e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d920      	bls.n	8007a30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80079f6:	e013      	b.n	8007a20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079f8:	f107 030a 	add.w	r3, r7, #10
 80079fc:	4619      	mov	r1, r3
 80079fe:	6978      	ldr	r0, [r7, #20]
 8007a00:	f000 f81b 	bl	8007a3a <USBD_GetNextDesc>
 8007a04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	d108      	bne.n	8007a20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d008      	beq.n	8007a2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	885b      	ldrh	r3, [r3, #2]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	897b      	ldrh	r3, [r7, #10]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d8e5      	bhi.n	80079f8 <USBD_GetEpDesc+0x32>
 8007a2c:	e000      	b.n	8007a30 <USBD_GetEpDesc+0x6a>
          break;
 8007a2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a30:	693b      	ldr	r3, [r7, #16]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	4413      	add	r3, r2
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4413      	add	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a92:	8a3b      	ldrh	r3, [r7, #16]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	b21a      	sxth	r2, r3
 8007a98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b21b      	sxth	r3, r3
 8007aa0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d005      	beq.n	8007ad6 <USBD_StdDevReq+0x26>
 8007aca:	2b40      	cmp	r3, #64	; 0x40
 8007acc:	d857      	bhi.n	8007b7e <USBD_StdDevReq+0xce>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00f      	beq.n	8007af2 <USBD_StdDevReq+0x42>
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d153      	bne.n	8007b7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	32ae      	adds	r2, #174	; 0xae
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e04a      	b.n	8007b88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d83b      	bhi.n	8007b72 <USBD_StdDevReq+0xc2>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_StdDevReq+0x50>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007b69 	.word	0x08007b69
 8007b08:	08007b73 	.word	0x08007b73
 8007b0c:	08007b5f 	.word	0x08007b5f
 8007b10:	08007b73 	.word	0x08007b73
 8007b14:	08007b33 	.word	0x08007b33
 8007b18:	08007b29 	.word	0x08007b29
 8007b1c:	08007b73 	.word	0x08007b73
 8007b20:	08007b4b 	.word	0x08007b4b
 8007b24:	08007b3d 	.word	0x08007b3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa3c 	bl	8007fa8 <USBD_GetDescriptor>
          break;
 8007b30:	e024      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fba1 	bl	800827c <USBD_SetAddress>
          break;
 8007b3a:	e01f      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fbe0 	bl	8008304 <USBD_SetConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
          break;
 8007b48:	e018      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc83 	bl	8008458 <USBD_GetConfig>
          break;
 8007b52:	e013      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fcb4 	bl	80084c4 <USBD_GetStatus>
          break;
 8007b5c:	e00e      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fce3 	bl	800852c <USBD_SetFeature>
          break;
 8007b66:	e009      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fd07 	bl	800857e <USBD_ClrFeature>
          break;
 8007b70:	e004      	b.n	8007b7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fd5e 	bl	8008636 <USBD_CtlError>
          break;
 8007b7a:	bf00      	nop
      }
      break;
 8007b7c:	e004      	b.n	8007b88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fd58 	bl	8008636 <USBD_CtlError>
      break;
 8007b86:	bf00      	nop
  }

  return ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop

08007b94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d005      	beq.n	8007bba <USBD_StdItfReq+0x26>
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d852      	bhi.n	8007c58 <USBD_StdItfReq+0xc4>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <USBD_StdItfReq+0x26>
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d14e      	bne.n	8007c58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d840      	bhi.n	8007c4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	889b      	ldrh	r3, [r3, #4]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d836      	bhi.n	8007c40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	889b      	ldrh	r3, [r3, #4]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fed9 	bl	8007992 <USBD_CoreFindIF>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2bff      	cmp	r3, #255	; 0xff
 8007be8:	d01d      	beq.n	8007c26 <USBD_StdItfReq+0x92>
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d11a      	bne.n	8007c26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007bf0:	7bba      	ldrb	r2, [r7, #14]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	32ae      	adds	r2, #174	; 0xae
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00f      	beq.n	8007c20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c00:	7bba      	ldrb	r2, [r7, #14]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c08:	7bba      	ldrb	r2, [r7, #14]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	32ae      	adds	r2, #174	; 0xae
 8007c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c1e:	e004      	b.n	8007c2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c24:	e001      	b.n	8007c2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	88db      	ldrh	r3, [r3, #6]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d110      	bne.n	8007c54 <USBD_StdItfReq+0xc0>
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10d      	bne.n	8007c54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fdc7 	bl	80087cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c3e:	e009      	b.n	8007c54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fcf7 	bl	8008636 <USBD_CtlError>
          break;
 8007c48:	e004      	b.n	8007c54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fcf2 	bl	8008636 <USBD_CtlError>
          break;
 8007c52:	e000      	b.n	8007c56 <USBD_StdItfReq+0xc2>
          break;
 8007c54:	bf00      	nop
      }
      break;
 8007c56:	e004      	b.n	8007c62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fceb 	bl	8008636 <USBD_CtlError>
      break;
 8007c60:	bf00      	nop
  }

  return ret;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	889b      	ldrh	r3, [r3, #4]
 8007c7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	d007      	beq.n	8007c9c <USBD_StdEPReq+0x30>
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	f200 817f 	bhi.w	8007f90 <USBD_StdEPReq+0x324>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d02a      	beq.n	8007cec <USBD_StdEPReq+0x80>
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	f040 817a 	bne.w	8007f90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fe83 	bl	80079ac <USBD_CoreFindEP>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007caa:	7b7b      	ldrb	r3, [r7, #13]
 8007cac:	2bff      	cmp	r3, #255	; 0xff
 8007cae:	f000 8174 	beq.w	8007f9a <USBD_StdEPReq+0x32e>
 8007cb2:	7b7b      	ldrb	r3, [r7, #13]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8170 	bne.w	8007f9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007cba:	7b7a      	ldrb	r2, [r7, #13]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cc2:	7b7a      	ldrb	r2, [r7, #13]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	32ae      	adds	r2, #174	; 0xae
 8007cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 8163 	beq.w	8007f9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007cd4:	7b7a      	ldrb	r2, [r7, #13]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32ae      	adds	r2, #174	; 0xae
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cea:	e156      	b.n	8007f9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d008      	beq.n	8007d06 <USBD_StdEPReq+0x9a>
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	f300 8145 	bgt.w	8007f84 <USBD_StdEPReq+0x318>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 809b 	beq.w	8007e36 <USBD_StdEPReq+0x1ca>
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d03c      	beq.n	8007d7e <USBD_StdEPReq+0x112>
 8007d04:	e13e      	b.n	8007f84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d002      	beq.n	8007d18 <USBD_StdEPReq+0xac>
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d016      	beq.n	8007d44 <USBD_StdEPReq+0xd8>
 8007d16:	e02c      	b.n	8007d72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00d      	beq.n	8007d3a <USBD_StdEPReq+0xce>
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	2b80      	cmp	r3, #128	; 0x80
 8007d22:	d00a      	beq.n	8007d3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f96d 	bl	8009008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d2e:	2180      	movs	r1, #128	; 0x80
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 f969 	bl	8009008 <USBD_LL_StallEP>
 8007d36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d38:	e020      	b.n	8007d7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fc7a 	bl	8008636 <USBD_CtlError>
              break;
 8007d42:	e01b      	b.n	8007d7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10e      	bne.n	8007d6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <USBD_StdEPReq+0xfe>
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b80      	cmp	r3, #128	; 0x80
 8007d56:	d008      	beq.n	8007d6a <USBD_StdEPReq+0xfe>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	88db      	ldrh	r3, [r3, #6]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f94f 	bl	8009008 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fd2e 	bl	80087cc <USBD_CtlSendStatus>

              break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fc5e 	bl	8008636 <USBD_CtlError>
              break;
 8007d7a:	bf00      	nop
          }
          break;
 8007d7c:	e107      	b.n	8007f8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d002      	beq.n	8007d90 <USBD_StdEPReq+0x124>
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d016      	beq.n	8007dbc <USBD_StdEPReq+0x150>
 8007d8e:	e04b      	b.n	8007e28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00d      	beq.n	8007db2 <USBD_StdEPReq+0x146>
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	2b80      	cmp	r3, #128	; 0x80
 8007d9a:	d00a      	beq.n	8007db2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 f931 	bl	8009008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007da6:	2180      	movs	r1, #128	; 0x80
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f92d 	bl	8009008 <USBD_LL_StallEP>
 8007dae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db0:	e040      	b.n	8007e34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc3e 	bl	8008636 <USBD_CtlError>
              break;
 8007dba:	e03b      	b.n	8007e34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	885b      	ldrh	r3, [r3, #2]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d136      	bne.n	8007e32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f937 	bl	8009046 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fcf7 	bl	80087cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fde2 	bl	80079ac <USBD_CoreFindEP>
 8007de8:	4603      	mov	r3, r0
 8007dea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dec:	7b7b      	ldrb	r3, [r7, #13]
 8007dee:	2bff      	cmp	r3, #255	; 0xff
 8007df0:	d01f      	beq.n	8007e32 <USBD_StdEPReq+0x1c6>
 8007df2:	7b7b      	ldrb	r3, [r7, #13]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11c      	bne.n	8007e32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007df8:	7b7a      	ldrb	r2, [r7, #13]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e00:	7b7a      	ldrb	r2, [r7, #13]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	32ae      	adds	r2, #174	; 0xae
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d010      	beq.n	8007e32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e10:	7b7a      	ldrb	r2, [r7, #13]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	32ae      	adds	r2, #174	; 0xae
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e26:	e004      	b.n	8007e32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fc03 	bl	8008636 <USBD_CtlError>
              break;
 8007e30:	e000      	b.n	8007e34 <USBD_StdEPReq+0x1c8>
              break;
 8007e32:	bf00      	nop
          }
          break;
 8007e34:	e0ab      	b.n	8007f8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d002      	beq.n	8007e48 <USBD_StdEPReq+0x1dc>
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d032      	beq.n	8007eac <USBD_StdEPReq+0x240>
 8007e46:	e097      	b.n	8007f78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <USBD_StdEPReq+0x1f2>
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b80      	cmp	r3, #128	; 0x80
 8007e52:	d004      	beq.n	8007e5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fbed 	bl	8008636 <USBD_CtlError>
                break;
 8007e5c:	e091      	b.n	8007f82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da0b      	bge.n	8007e7e <USBD_StdEPReq+0x212>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	3310      	adds	r3, #16
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	4413      	add	r3, r2
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	e00b      	b.n	8007e96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	3304      	adds	r3, #4
 8007e96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc37 	bl	8008718 <USBD_CtlSendData>
              break;
 8007eaa:	e06a      	b.n	8007f82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da11      	bge.n	8007ed8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	f003 020f 	and.w	r2, r3, #15
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3324      	adds	r3, #36	; 0x24
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d117      	bne.n	8007efe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fbb0 	bl	8008636 <USBD_CtlError>
                  break;
 8007ed6:	e054      	b.n	8007f82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 020f 	and.w	r2, r3, #15
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fb9d 	bl	8008636 <USBD_CtlError>
                  break;
 8007efc:	e041      	b.n	8007f82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007efe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	da0b      	bge.n	8007f1e <USBD_StdEPReq+0x2b2>
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	3310      	adds	r3, #16
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	e00b      	b.n	8007f36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	3304      	adds	r3, #4
 8007f36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <USBD_StdEPReq+0x2d8>
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b80      	cmp	r3, #128	; 0x80
 8007f42:	d103      	bne.n	8007f4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e00e      	b.n	8007f6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f897 	bl	8009084 <USBD_LL_IsStallEP>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e002      	b.n	8007f6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fbd1 	bl	8008718 <USBD_CtlSendData>
              break;
 8007f76:	e004      	b.n	8007f82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fb5b 	bl	8008636 <USBD_CtlError>
              break;
 8007f80:	bf00      	nop
          }
          break;
 8007f82:	e004      	b.n	8007f8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fb55 	bl	8008636 <USBD_CtlError>
          break;
 8007f8c:	bf00      	nop
      }
      break;
 8007f8e:	e005      	b.n	8007f9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fb4f 	bl	8008636 <USBD_CtlError>
      break;
 8007f98:	e000      	b.n	8007f9c <USBD_StdEPReq+0x330>
      break;
 8007f9a:	bf00      	nop
  }

  return ret;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	0a1b      	lsrs	r3, r3, #8
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	2b06      	cmp	r3, #6
 8007fca:	f200 8128 	bhi.w	800821e <USBD_GetDescriptor+0x276>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <USBD_GetDescriptor+0x2c>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007ff1 	.word	0x08007ff1
 8007fd8:	08008009 	.word	0x08008009
 8007fdc:	08008049 	.word	0x08008049
 8007fe0:	0800821f 	.word	0x0800821f
 8007fe4:	0800821f 	.word	0x0800821f
 8007fe8:	080081bf 	.word	0x080081bf
 8007fec:	080081eb 	.word	0x080081eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7c12      	ldrb	r2, [r2, #16]
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	60f8      	str	r0, [r7, #12]
      break;
 8008006:	e112      	b.n	800822e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7c1b      	ldrb	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10d      	bne.n	800802c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f107 0208 	add.w	r2, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	2202      	movs	r2, #2
 8008028:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800802a:	e100      	b.n	800822e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	f107 0208 	add.w	r2, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	2202      	movs	r2, #2
 8008044:	701a      	strb	r2, [r3, #0]
      break;
 8008046:	e0f2      	b.n	800822e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	885b      	ldrh	r3, [r3, #2]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b05      	cmp	r3, #5
 8008050:	f200 80ac 	bhi.w	80081ac <USBD_GetDescriptor+0x204>
 8008054:	a201      	add	r2, pc, #4	; (adr r2, 800805c <USBD_GetDescriptor+0xb4>)
 8008056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805a:	bf00      	nop
 800805c:	08008075 	.word	0x08008075
 8008060:	080080a9 	.word	0x080080a9
 8008064:	080080dd 	.word	0x080080dd
 8008068:	08008111 	.word	0x08008111
 800806c:	08008145 	.word	0x08008145
 8008070:	08008179 	.word	0x08008179
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008096:	e091      	b.n	80081bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 facb 	bl	8008636 <USBD_CtlError>
            err++;
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	3301      	adds	r3, #1
 80080a4:	72fb      	strb	r3, [r7, #11]
          break;
 80080a6:	e089      	b.n	80081bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	7c12      	ldrb	r2, [r2, #16]
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ca:	e077      	b.n	80081bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fab1 	bl	8008636 <USBD_CtlError>
            err++;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	3301      	adds	r3, #1
 80080d8:	72fb      	strb	r3, [r7, #11]
          break;
 80080da:	e06f      	b.n	80081bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	7c12      	ldrb	r2, [r2, #16]
 80080f4:	f107 0108 	add.w	r1, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fe:	e05d      	b.n	80081bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa97 	bl	8008636 <USBD_CtlError>
            err++;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	3301      	adds	r3, #1
 800810c:	72fb      	strb	r3, [r7, #11]
          break;
 800810e:	e055      	b.n	80081bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	7c12      	ldrb	r2, [r2, #16]
 8008128:	f107 0108 	add.w	r1, r7, #8
 800812c:	4610      	mov	r0, r2
 800812e:	4798      	blx	r3
 8008130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008132:	e043      	b.n	80081bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa7d 	bl	8008636 <USBD_CtlError>
            err++;
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	3301      	adds	r3, #1
 8008140:	72fb      	strb	r3, [r7, #11]
          break;
 8008142:	e03b      	b.n	80081bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	7c12      	ldrb	r2, [r2, #16]
 800815c:	f107 0108 	add.w	r1, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008166:	e029      	b.n	80081bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa63 	bl	8008636 <USBD_CtlError>
            err++;
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	3301      	adds	r3, #1
 8008174:	72fb      	strb	r3, [r7, #11]
          break;
 8008176:	e021      	b.n	80081bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7c12      	ldrb	r2, [r2, #16]
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
 8008198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819a:	e00f      	b.n	80081bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa49 	bl	8008636 <USBD_CtlError>
            err++;
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	3301      	adds	r3, #1
 80081a8:	72fb      	strb	r3, [r7, #11]
          break;
 80081aa:	e007      	b.n	80081bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa41 	bl	8008636 <USBD_CtlError>
          err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081ba:	bf00      	nop
      }
      break;
 80081bc:	e037      	b.n	800822e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	7c1b      	ldrb	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ce:	f107 0208 	add.w	r2, r7, #8
 80081d2:	4610      	mov	r0, r2
 80081d4:	4798      	blx	r3
 80081d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081d8:	e029      	b.n	800822e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa2a 	bl	8008636 <USBD_CtlError>
        err++;
 80081e2:	7afb      	ldrb	r3, [r7, #11]
 80081e4:	3301      	adds	r3, #1
 80081e6:	72fb      	strb	r3, [r7, #11]
      break;
 80081e8:	e021      	b.n	800822e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7c1b      	ldrb	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10d      	bne.n	800820e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	f107 0208 	add.w	r2, r7, #8
 80081fe:	4610      	mov	r0, r2
 8008200:	4798      	blx	r3
 8008202:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	2207      	movs	r2, #7
 800820a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800820c:	e00f      	b.n	800822e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa10 	bl	8008636 <USBD_CtlError>
        err++;
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	3301      	adds	r3, #1
 800821a:	72fb      	strb	r3, [r7, #11]
      break;
 800821c:	e007      	b.n	800822e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fa08 	bl	8008636 <USBD_CtlError>
      err++;
 8008226:	7afb      	ldrb	r3, [r7, #11]
 8008228:	3301      	adds	r3, #1
 800822a:	72fb      	strb	r3, [r7, #11]
      break;
 800822c:	bf00      	nop
  }

  if (err != 0U)
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11e      	bne.n	8008272 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d016      	beq.n	800826a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800823c:	893b      	ldrh	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00e      	beq.n	8008260 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	88da      	ldrh	r2, [r3, #6]
 8008246:	893b      	ldrh	r3, [r7, #8]
 8008248:	4293      	cmp	r3, r2
 800824a:	bf28      	it	cs
 800824c:	4613      	movcs	r3, r2
 800824e:	b29b      	uxth	r3, r3
 8008250:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008252:	893b      	ldrh	r3, [r7, #8]
 8008254:	461a      	mov	r2, r3
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fa5d 	bl	8008718 <USBD_CtlSendData>
 800825e:	e009      	b.n	8008274 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f9e7 	bl	8008636 <USBD_CtlError>
 8008268:	e004      	b.n	8008274 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 faae 	bl	80087cc <USBD_CtlSendStatus>
 8008270:	e000      	b.n	8008274 <USBD_GetDescriptor+0x2cc>
    return;
 8008272:	bf00      	nop
  }
}
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop

0800827c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	889b      	ldrh	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d131      	bne.n	80082f2 <USBD_SetAddress+0x76>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	88db      	ldrh	r3, [r3, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d12d      	bne.n	80082f2 <USBD_SetAddress+0x76>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b7f      	cmp	r3, #127	; 0x7f
 800829c:	d829      	bhi.n	80082f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d104      	bne.n	80082c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f9bc 	bl	8008636 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082be:	e01d      	b.n	80082fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7bfa      	ldrb	r2, [r7, #15]
 80082c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 ff05 	bl	80090dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa7a 	bl	80087cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2202      	movs	r2, #2
 80082e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	e009      	b.n	80082fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f0:	e004      	b.n	80082fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f99e 	bl	8008636 <USBD_CtlError>
  }
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	4b4e      	ldr	r3, [pc, #312]	; (8008454 <USBD_SetConfig+0x150>)
 800831a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800831c:	4b4d      	ldr	r3, [pc, #308]	; (8008454 <USBD_SetConfig+0x150>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d905      	bls.n	8008330 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f985 	bl	8008636 <USBD_CtlError>
    return USBD_FAIL;
 800832c:	2303      	movs	r3, #3
 800832e:	e08c      	b.n	800844a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d002      	beq.n	8008342 <USBD_SetConfig+0x3e>
 800833c:	2b03      	cmp	r3, #3
 800833e:	d029      	beq.n	8008394 <USBD_SetConfig+0x90>
 8008340:	e075      	b.n	800842e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008342:	4b44      	ldr	r3, [pc, #272]	; (8008454 <USBD_SetConfig+0x150>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d020      	beq.n	800838c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800834a:	4b42      	ldr	r3, [pc, #264]	; (8008454 <USBD_SetConfig+0x150>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008354:	4b3f      	ldr	r3, [pc, #252]	; (8008454 <USBD_SetConfig+0x150>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fe ffe7 	bl	800732e <USBD_SetClassConfig>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d008      	beq.n	800837c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f962 	bl	8008636 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800837a:	e065      	b.n	8008448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa25 	bl	80087cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2203      	movs	r2, #3
 8008386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800838a:	e05d      	b.n	8008448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa1d 	bl	80087cc <USBD_CtlSendStatus>
      break;
 8008392:	e059      	b.n	8008448 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008394:	4b2f      	ldr	r3, [pc, #188]	; (8008454 <USBD_SetConfig+0x150>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d112      	bne.n	80083c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80083a4:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <USBD_SetConfig+0x150>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ae:	4b29      	ldr	r3, [pc, #164]	; (8008454 <USBD_SetConfig+0x150>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7fe ffd6 	bl	8007366 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa06 	bl	80087cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083c0:	e042      	b.n	8008448 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083c2:	4b24      	ldr	r3, [pc, #144]	; (8008454 <USBD_SetConfig+0x150>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d02a      	beq.n	8008426 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7fe ffc4 	bl	8007366 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <USBD_SetConfig+0x150>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e8:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <USBD_SetConfig+0x150>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fe ff9d 	bl	800732e <USBD_SetClassConfig>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00f      	beq.n	800841e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f918 	bl	8008636 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7fe ffa9 	bl	8007366 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800841c:	e014      	b.n	8008448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f9d4 	bl	80087cc <USBD_CtlSendStatus>
      break;
 8008424:	e010      	b.n	8008448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9d0 	bl	80087cc <USBD_CtlSendStatus>
      break;
 800842c:	e00c      	b.n	8008448 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f900 	bl	8008636 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <USBD_SetConfig+0x150>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7fe ff92 	bl	8007366 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	bf00      	nop
  }

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	200031c4 	.word	0x200031c4

08008458 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	88db      	ldrh	r3, [r3, #6]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d004      	beq.n	8008474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f8e2 	bl	8008636 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008472:	e023      	b.n	80084bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	dc02      	bgt.n	8008486 <USBD_GetConfig+0x2e>
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc03      	bgt.n	800848c <USBD_GetConfig+0x34>
 8008484:	e015      	b.n	80084b2 <USBD_GetConfig+0x5a>
 8008486:	2b03      	cmp	r3, #3
 8008488:	d00b      	beq.n	80084a2 <USBD_GetConfig+0x4a>
 800848a:	e012      	b.n	80084b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3308      	adds	r3, #8
 8008496:	2201      	movs	r2, #1
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f93c 	bl	8008718 <USBD_CtlSendData>
        break;
 80084a0:	e00c      	b.n	80084bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3304      	adds	r3, #4
 80084a6:	2201      	movs	r2, #1
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f934 	bl	8008718 <USBD_CtlSendData>
        break;
 80084b0:	e004      	b.n	80084bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f8be 	bl	8008636 <USBD_CtlError>
        break;
 80084ba:	bf00      	nop
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d81e      	bhi.n	800851a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d004      	beq.n	80084ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f8a5 	bl	8008636 <USBD_CtlError>
        break;
 80084ec:	e01a      	b.n	8008524 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 0202 	orr.w	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	330c      	adds	r3, #12
 800850e:	2202      	movs	r2, #2
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f900 	bl	8008718 <USBD_CtlSendData>
      break;
 8008518:	e004      	b.n	8008524 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f88a 	bl	8008636 <USBD_CtlError>
      break;
 8008522:	bf00      	nop
  }
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d107      	bne.n	800854e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f940 	bl	80087cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800854c:	e013      	b.n	8008576 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d10b      	bne.n	800856e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	0a1b      	lsrs	r3, r3, #8
 800855c:	b29b      	uxth	r3, r3
 800855e:	b2da      	uxtb	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f930 	bl	80087cc <USBD_CtlSendStatus>
}
 800856c:	e003      	b.n	8008576 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f860 	bl	8008636 <USBD_CtlError>
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858e:	b2db      	uxtb	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	2b02      	cmp	r3, #2
 8008594:	d80b      	bhi.n	80085ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d10c      	bne.n	80085b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f910 	bl	80087cc <USBD_CtlSendStatus>
      }
      break;
 80085ac:	e004      	b.n	80085b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f840 	bl	8008636 <USBD_CtlError>
      break;
 80085b6:	e000      	b.n	80085ba <USBD_ClrFeature+0x3c>
      break;
 80085b8:	bf00      	nop
  }
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	781a      	ldrb	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7ff fa41 	bl	8007a74 <SWAPBYTE>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3301      	adds	r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff fa34 	bl	8007a74 <SWAPBYTE>
 800860c:	4603      	mov	r3, r0
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff fa27 	bl	8007a74 <SWAPBYTE>
 8008626:	4603      	mov	r3, r0
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	80da      	strh	r2, [r3, #6]
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008640:	2180      	movs	r1, #128	; 0x80
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fce0 	bl	8009008 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008648:	2100      	movs	r1, #0
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fcdc 	bl	8009008 <USBD_LL_StallEP>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d036      	beq.n	80086dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008672:	6938      	ldr	r0, [r7, #16]
 8008674:	f000 f836 	bl	80086e4 <USBD_GetLen>
 8008678:	4603      	mov	r3, r0
 800867a:	3301      	adds	r3, #1
 800867c:	b29b      	uxth	r3, r3
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	4413      	add	r3, r2
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	701a      	strb	r2, [r3, #0]
  idx++;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	3301      	adds	r3, #1
 8008696:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	2203      	movs	r2, #3
 80086a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3301      	adds	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086a8:	e013      	b.n	80086d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	4413      	add	r3, r2
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	7812      	ldrb	r2, [r2, #0]
 80086b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3301      	adds	r3, #1
 80086ba:	613b      	str	r3, [r7, #16]
    idx++;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	3301      	adds	r3, #1
 80086c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	4413      	add	r3, r2
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	3301      	adds	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e7      	bne.n	80086aa <USBD_GetString+0x52>
 80086da:	e000      	b.n	80086de <USBD_GetString+0x86>
    return;
 80086dc:	bf00      	nop
  }
}
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086f4:	e005      	b.n	8008702 <USBD_GetLen+0x1e>
  {
    len++;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	3301      	adds	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	3301      	adds	r3, #1
 8008700:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f5      	bne.n	80086f6 <USBD_GetLen+0x12>
  }

  return len;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2202      	movs	r2, #2
 8008728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	2100      	movs	r1, #0
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 fceb 	bl	800911a <USBD_LL_Transmit>

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	2100      	movs	r1, #0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fcda 	bl	800911a <USBD_LL_Transmit>

  return USBD_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2203      	movs	r2, #3
 8008780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	2100      	movs	r1, #0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fcde 	bl	800915c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	2100      	movs	r1, #0
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 fccd 	bl	800915c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2204      	movs	r2, #4
 80087d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087dc:	2300      	movs	r3, #0
 80087de:	2200      	movs	r2, #0
 80087e0:	2100      	movs	r1, #0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fc99 	bl	800911a <USBD_LL_Transmit>

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2205      	movs	r2, #5
 80087fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fca7 	bl	800915c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800881c:	2200      	movs	r2, #0
 800881e:	4912      	ldr	r1, [pc, #72]	; (8008868 <MX_USB_DEVICE_Init+0x50>)
 8008820:	4812      	ldr	r0, [pc, #72]	; (800886c <MX_USB_DEVICE_Init+0x54>)
 8008822:	f7fe fd07 	bl	8007234 <USBD_Init>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800882c:	f7f8 f9ba 	bl	8000ba4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008830:	490f      	ldr	r1, [pc, #60]	; (8008870 <MX_USB_DEVICE_Init+0x58>)
 8008832:	480e      	ldr	r0, [pc, #56]	; (800886c <MX_USB_DEVICE_Init+0x54>)
 8008834:	f7fe fd2e 	bl	8007294 <USBD_RegisterClass>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800883e:	f7f8 f9b1 	bl	8000ba4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008842:	490c      	ldr	r1, [pc, #48]	; (8008874 <MX_USB_DEVICE_Init+0x5c>)
 8008844:	4809      	ldr	r0, [pc, #36]	; (800886c <MX_USB_DEVICE_Init+0x54>)
 8008846:	f7fe fc1f 	bl	8007088 <USBD_CDC_RegisterInterface>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008850:	f7f8 f9a8 	bl	8000ba4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008854:	4805      	ldr	r0, [pc, #20]	; (800886c <MX_USB_DEVICE_Init+0x54>)
 8008856:	f7fe fd53 	bl	8007300 <USBD_Start>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008860:	f7f8 f9a0 	bl	8000ba4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008864:	bf00      	nop
 8008866:	bd80      	pop	{r7, pc}
 8008868:	200000ac 	.word	0x200000ac
 800886c:	200031c8 	.word	0x200031c8
 8008870:	20000018 	.word	0x20000018
 8008874:	20000098 	.word	0x20000098

08008878 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800887c:	2200      	movs	r2, #0
 800887e:	4905      	ldr	r1, [pc, #20]	; (8008894 <CDC_Init_FS+0x1c>)
 8008880:	4805      	ldr	r0, [pc, #20]	; (8008898 <CDC_Init_FS+0x20>)
 8008882:	f7fe fc1b 	bl	80070bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008886:	4905      	ldr	r1, [pc, #20]	; (800889c <CDC_Init_FS+0x24>)
 8008888:	4803      	ldr	r0, [pc, #12]	; (8008898 <CDC_Init_FS+0x20>)
 800888a:	f7fe fc39 	bl	8007100 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800888e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008890:	4618      	mov	r0, r3
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20003ca4 	.word	0x20003ca4
 8008898:	200031c8 	.word	0x200031c8
 800889c:	200034a4 	.word	0x200034a4

080088a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
 80088bc:	4613      	mov	r3, r2
 80088be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	2b23      	cmp	r3, #35	; 0x23
 80088c4:	d84a      	bhi.n	800895c <CDC_Control_FS+0xac>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <CDC_Control_FS+0x1c>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	0800895d 	.word	0x0800895d
 80088d0:	0800895d 	.word	0x0800895d
 80088d4:	0800895d 	.word	0x0800895d
 80088d8:	0800895d 	.word	0x0800895d
 80088dc:	0800895d 	.word	0x0800895d
 80088e0:	0800895d 	.word	0x0800895d
 80088e4:	0800895d 	.word	0x0800895d
 80088e8:	0800895d 	.word	0x0800895d
 80088ec:	0800895d 	.word	0x0800895d
 80088f0:	0800895d 	.word	0x0800895d
 80088f4:	0800895d 	.word	0x0800895d
 80088f8:	0800895d 	.word	0x0800895d
 80088fc:	0800895d 	.word	0x0800895d
 8008900:	0800895d 	.word	0x0800895d
 8008904:	0800895d 	.word	0x0800895d
 8008908:	0800895d 	.word	0x0800895d
 800890c:	0800895d 	.word	0x0800895d
 8008910:	0800895d 	.word	0x0800895d
 8008914:	0800895d 	.word	0x0800895d
 8008918:	0800895d 	.word	0x0800895d
 800891c:	0800895d 	.word	0x0800895d
 8008920:	0800895d 	.word	0x0800895d
 8008924:	0800895d 	.word	0x0800895d
 8008928:	0800895d 	.word	0x0800895d
 800892c:	0800895d 	.word	0x0800895d
 8008930:	0800895d 	.word	0x0800895d
 8008934:	0800895d 	.word	0x0800895d
 8008938:	0800895d 	.word	0x0800895d
 800893c:	0800895d 	.word	0x0800895d
 8008940:	0800895d 	.word	0x0800895d
 8008944:	0800895d 	.word	0x0800895d
 8008948:	0800895d 	.word	0x0800895d
 800894c:	0800895d 	.word	0x0800895d
 8008950:	0800895d 	.word	0x0800895d
 8008954:	0800895d 	.word	0x0800895d
 8008958:	0800895d 	.word	0x0800895d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800895c:	bf00      	nop
  }

  return (USBD_OK);
 800895e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4805      	ldr	r0, [pc, #20]	; (8008990 <CDC_Receive_FS+0x24>)
 800897a:	f7fe fbc1 	bl	8007100 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800897e:	4804      	ldr	r0, [pc, #16]	; (8008990 <CDC_Receive_FS+0x24>)
 8008980:	f7fe fc22 	bl	80071c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008984:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200031c8 	.word	0x200031c8

08008994 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089a4:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <CDC_Transmit_FS+0x48>)
 80089a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e00b      	b.n	80089d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089ba:	887b      	ldrh	r3, [r7, #2]
 80089bc:	461a      	mov	r2, r3
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	4806      	ldr	r0, [pc, #24]	; (80089dc <CDC_Transmit_FS+0x48>)
 80089c2:	f7fe fb7b 	bl	80070bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089c6:	4805      	ldr	r0, [pc, #20]	; (80089dc <CDC_Transmit_FS+0x48>)
 80089c8:	f7fe fbb8 	bl	800713c <USBD_CDC_TransmitPacket>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200031c8 	.word	0x200031c8

080089e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80089f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2212      	movs	r2, #18
 8008a14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a16:	4b03      	ldr	r3, [pc, #12]	; (8008a24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	200000c8 	.word	0x200000c8

08008a28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2204      	movs	r2, #4
 8008a38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a3a:	4b03      	ldr	r3, [pc, #12]	; (8008a48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	200000dc 	.word	0x200000dc

08008a4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4907      	ldr	r1, [pc, #28]	; (8008a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a62:	4808      	ldr	r0, [pc, #32]	; (8008a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a64:	f7ff fdf8 	bl	8008658 <USBD_GetString>
 8008a68:	e004      	b.n	8008a74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4904      	ldr	r1, [pc, #16]	; (8008a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a6e:	4805      	ldr	r0, [pc, #20]	; (8008a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a70:	f7ff fdf2 	bl	8008658 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200044a4 	.word	0x200044a4
 8008a84:	080092bc 	.word	0x080092bc

08008a88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	4904      	ldr	r1, [pc, #16]	; (8008aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a98:	4804      	ldr	r0, [pc, #16]	; (8008aac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a9a:	f7ff fddd 	bl	8008658 <USBD_GetString>
  return USBD_StrDesc;
 8008a9e:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	200044a4 	.word	0x200044a4
 8008aac:	080092d4 	.word	0x080092d4

08008ab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	221a      	movs	r2, #26
 8008ac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ac2:	f000 f843 	bl	8008b4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ac6:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200000e0 	.word	0x200000e0

08008ad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d105      	bne.n	8008af2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4907      	ldr	r1, [pc, #28]	; (8008b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aea:	4808      	ldr	r0, [pc, #32]	; (8008b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aec:	f7ff fdb4 	bl	8008658 <USBD_GetString>
 8008af0:	e004      	b.n	8008afc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	4904      	ldr	r1, [pc, #16]	; (8008b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008af6:	4805      	ldr	r0, [pc, #20]	; (8008b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008af8:	f7ff fdae 	bl	8008658 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200044a4 	.word	0x200044a4
 8008b0c:	080092e8 	.word	0x080092e8

08008b10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d105      	bne.n	8008b2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4907      	ldr	r1, [pc, #28]	; (8008b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b26:	4808      	ldr	r0, [pc, #32]	; (8008b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b28:	f7ff fd96 	bl	8008658 <USBD_GetString>
 8008b2c:	e004      	b.n	8008b38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4904      	ldr	r1, [pc, #16]	; (8008b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b32:	4805      	ldr	r0, [pc, #20]	; (8008b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b34:	f7ff fd90 	bl	8008658 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b38:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200044a4 	.word	0x200044a4
 8008b48:	080092f4 	.word	0x080092f4

08008b4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <Get_SerialNum+0x44>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b58:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <Get_SerialNum+0x48>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b5e:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <Get_SerialNum+0x4c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d009      	beq.n	8008b86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b72:	2208      	movs	r2, #8
 8008b74:	4909      	ldr	r1, [pc, #36]	; (8008b9c <Get_SerialNum+0x50>)
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f814 	bl	8008ba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	4908      	ldr	r1, [pc, #32]	; (8008ba0 <Get_SerialNum+0x54>)
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	f000 f80f 	bl	8008ba4 <IntToUnicode>
  }
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	1fff7a10 	.word	0x1fff7a10
 8008b94:	1fff7a14 	.word	0x1fff7a14
 8008b98:	1fff7a18 	.word	0x1fff7a18
 8008b9c:	200000e2 	.word	0x200000e2
 8008ba0:	200000f2 	.word	0x200000f2

08008ba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	75fb      	strb	r3, [r7, #23]
 8008bba:	e027      	b.n	8008c0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	0f1b      	lsrs	r3, r3, #28
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d80b      	bhi.n	8008bdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	0f1b      	lsrs	r3, r3, #28
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	440b      	add	r3, r1
 8008bd4:	3230      	adds	r2, #48	; 0x30
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	e00a      	b.n	8008bf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	0f1b      	lsrs	r3, r3, #28
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	4619      	mov	r1, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	440b      	add	r3, r1
 8008bec:	3237      	adds	r2, #55	; 0x37
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
 8008c0c:	7dfa      	ldrb	r2, [r7, #23]
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d3d3      	bcc.n	8008bbc <IntToUnicode+0x18>
  }
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c2c:	f107 0314 	add.w	r3, r7, #20
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	609a      	str	r2, [r3, #8]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c44:	d13a      	bne.n	8008cbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	6313      	str	r3, [r2, #48]	; 0x30
 8008c56:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c70:	2303      	movs	r3, #3
 8008c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c74:	230a      	movs	r3, #10
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4812      	ldr	r0, [pc, #72]	; (8008cc8 <HAL_PCD_MspInit+0xa4>)
 8008c80:	f7f9 fa94 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c84:	4b0f      	ldr	r3, [pc, #60]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	4a0e      	ldr	r2, [pc, #56]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	6353      	str	r3, [r2, #52]	; 0x34
 8008c90:	2300      	movs	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8008ca0:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <HAL_PCD_MspInit+0xa0>)
 8008ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cac:	2200      	movs	r2, #0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	2043      	movs	r0, #67	; 0x43
 8008cb2:	f7f8 fed4 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cb6:	2043      	movs	r0, #67	; 0x43
 8008cb8:	f7f8 feed 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3728      	adds	r7, #40	; 0x28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	40020000 	.word	0x40020000

08008ccc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7fe fb59 	bl	800739a <USBD_LL_SetupStage>
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f7fe fb93 	bl	8007444 <USBD_LL_DataOutStage>
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d38:	78fa      	ldrb	r2, [r7, #3]
 8008d3a:	6879      	ldr	r1, [r7, #4]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	334c      	adds	r3, #76	; 0x4c
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f7fe fc2c 	bl	80075aa <USBD_LL_DataInStage>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe fd60 	bl	800782e <USBD_LL_SOF>
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d102      	bne.n	8008d90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
 8008d8e:	e008      	b.n	8008da2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d102      	bne.n	8008d9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	73fb      	strb	r3, [r7, #15]
 8008d9c:	e001      	b.n	8008da2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d9e:	f7f7 ff01 	bl	8000ba4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da8:	7bfa      	ldrb	r2, [r7, #15]
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe fd00 	bl	80077b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fca8 	bl	800770e <USBD_LL_Reset>
}
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fcfb 	bl	80077d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6812      	ldr	r2, [r2, #0]
 8008dea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d005      	beq.n	8008e08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <HAL_PCD_SuspendCallback+0x48>)
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	4a03      	ldr	r2, [pc, #12]	; (8008e10 <HAL_PCD_SuspendCallback+0x48>)
 8008e02:	f043 0306 	orr.w	r3, r3, #6
 8008e06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	e000ed00 	.word	0xe000ed00

08008e14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fceb 	bl	80077fe <USBD_LL_Resume>
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fd43 	bl	80078d2 <USBD_LL_IsoOUTIncomplete>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fcff 	bl	800786e <USBD_LL_IsoINIncomplete>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fd55 	bl	8007936 <USBD_LL_DevConnected>
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fd52 	bl	800794c <USBD_LL_DevDisconnected>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d13c      	bne.n	8008f3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ec0:	4a20      	ldr	r2, [pc, #128]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ecc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ed0:	4b1c      	ldr	r3, [pc, #112]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ed2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ed6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ed8:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <USBD_LL_Init+0x94>)
 8008eda:	2204      	movs	r2, #4
 8008edc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ede:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ee4:	4b17      	ldr	r3, [pc, #92]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008eea:	4b16      	ldr	r3, [pc, #88]	; (8008f44 <USBD_LL_Init+0x94>)
 8008eec:	2202      	movs	r2, #2
 8008eee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ef0:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ef6:	4b13      	ldr	r3, [pc, #76]	; (8008f44 <USBD_LL_Init+0x94>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008efc:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <USBD_LL_Init+0x94>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f02:	4b10      	ldr	r3, [pc, #64]	; (8008f44 <USBD_LL_Init+0x94>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <USBD_LL_Init+0x94>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f0e:	480d      	ldr	r0, [pc, #52]	; (8008f44 <USBD_LL_Init+0x94>)
 8008f10:	f7f9 fad0 	bl	80024b4 <HAL_PCD_Init>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f1a:	f7f7 fe43 	bl	8000ba4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f1e:	2180      	movs	r1, #128	; 0x80
 8008f20:	4808      	ldr	r0, [pc, #32]	; (8008f44 <USBD_LL_Init+0x94>)
 8008f22:	f7fa fd28 	bl	8003976 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f26:	2240      	movs	r2, #64	; 0x40
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4806      	ldr	r0, [pc, #24]	; (8008f44 <USBD_LL_Init+0x94>)
 8008f2c:	f7fa fcdc 	bl	80038e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f30:	2280      	movs	r2, #128	; 0x80
 8008f32:	2101      	movs	r1, #1
 8008f34:	4803      	ldr	r0, [pc, #12]	; (8008f44 <USBD_LL_Init+0x94>)
 8008f36:	f7fa fcd7 	bl	80038e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	200046a4 	.word	0x200046a4

08008f48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f9 fbc5 	bl	80026ee <HAL_PCD_Start>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f942 	bl	80091f4 <USBD_Get_USB_Status>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	70fb      	strb	r3, [r7, #3]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70bb      	strb	r3, [r7, #2]
 8008f94:	4613      	mov	r3, r2
 8008f96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008fa6:	78bb      	ldrb	r3, [r7, #2]
 8008fa8:	883a      	ldrh	r2, [r7, #0]
 8008faa:	78f9      	ldrb	r1, [r7, #3]
 8008fac:	f7fa f896 	bl	80030dc <HAL_PCD_EP_Open>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f91c 	bl	80091f4 <USBD_Get_USB_Status>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fa f8df 	bl	80031ac <HAL_PCD_EP_Close>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f8fd 	bl	80091f4 <USBD_Get_USB_Status>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009022:	78fa      	ldrb	r2, [r7, #3]
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7fa f9b7 	bl	800339a <HAL_PCD_EP_SetStall>
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 f8de 	bl	80091f4 <USBD_Get_USB_Status>
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903c:	7bbb      	ldrb	r3, [r7, #14]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7fa f9fc 	bl	8003462 <HAL_PCD_EP_ClrStall>
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	4618      	mov	r0, r3
 8009072:	f000 f8bf 	bl	80091f4 <USBD_Get_USB_Status>
 8009076:	4603      	mov	r3, r0
 8009078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907a:	7bbb      	ldrb	r3, [r7, #14]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009096:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800909c:	2b00      	cmp	r3, #0
 800909e:	da0b      	bge.n	80090b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	4613      	mov	r3, r2
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	440b      	add	r3, r1
 80090b2:	333e      	adds	r3, #62	; 0x3e
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	e00b      	b.n	80090d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090be:	68f9      	ldr	r1, [r7, #12]
 80090c0:	4613      	mov	r3, r2
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80090ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	4611      	mov	r1, r2
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f9 ffc9 	bl	8003092 <HAL_PCD_SetAddress>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 f874 	bl	80091f4 <USBD_Get_USB_Status>
 800910c:	4603      	mov	r3, r0
 800910e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009110:	7bbb      	ldrb	r3, [r7, #14]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	460b      	mov	r3, r1
 8009128:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009138:	7af9      	ldrb	r1, [r7, #11]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	f7fa f8e2 	bl	8003306 <HAL_PCD_EP_Transmit>
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	4618      	mov	r0, r3
 800914a:	f000 f853 	bl	80091f4 <USBD_Get_USB_Status>
 800914e:	4603      	mov	r3, r0
 8009150:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009152:	7dbb      	ldrb	r3, [r7, #22]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	460b      	mov	r3, r1
 800916a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800917a:	7af9      	ldrb	r1, [r7, #11]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	f7fa f85e 	bl	8003240 <HAL_PCD_EP_Receive>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f832 	bl	80091f4 <USBD_Get_USB_Status>
 8009190:	4603      	mov	r3, r0
 8009192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009194:	7dbb      	ldrb	r3, [r7, #22]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	4611      	mov	r1, r2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fa f88e 	bl	80032d6 <HAL_PCD_EP_GetRxCount>
 80091ba:	4603      	mov	r3, r0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091cc:	4b03      	ldr	r3, [pc, #12]	; (80091dc <USBD_static_malloc+0x18>)
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20004bb0 	.word	0x20004bb0

080091e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]

}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d817      	bhi.n	8009238 <USBD_Get_USB_Status+0x44>
 8009208:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <USBD_Get_USB_Status+0x1c>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009221 	.word	0x08009221
 8009214:	08009227 	.word	0x08009227
 8009218:	0800922d 	.word	0x0800922d
 800921c:	08009233 	.word	0x08009233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
    break;
 8009224:	e00b      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009226:	2303      	movs	r3, #3
 8009228:	73fb      	strb	r3, [r7, #15]
    break;
 800922a:	e008      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800922c:	2301      	movs	r3, #1
 800922e:	73fb      	strb	r3, [r7, #15]
    break;
 8009230:	e005      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009232:	2303      	movs	r3, #3
 8009234:	73fb      	strb	r3, [r7, #15]
    break;
 8009236:	e002      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	73fb      	strb	r3, [r7, #15]
    break;
 800923c:	bf00      	nop
  }
  return usb_status;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4d0d      	ldr	r5, [pc, #52]	; (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	; (8009288 <__libc_init_array+0x3c>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2600      	movs	r6, #0
 8009258:	42a6      	cmp	r6, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4d0b      	ldr	r5, [pc, #44]	; (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	; (8009290 <__libc_init_array+0x44>)
 8009260:	f000 f820 	bl	80092a4 <_init>
 8009264:	1b64      	subs	r4, r4, r5
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2600      	movs	r6, #0
 800926a:	42a6      	cmp	r6, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f855 3b04 	ldr.w	r3, [r5], #4
 8009274:	4798      	blx	r3
 8009276:	3601      	adds	r6, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f855 3b04 	ldr.w	r3, [r5], #4
 800927e:	4798      	blx	r3
 8009280:	3601      	adds	r6, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	08009324 	.word	0x08009324
 8009288:	08009324 	.word	0x08009324
 800928c:	08009324 	.word	0x08009324
 8009290:	08009328 	.word	0x08009328

08009294 <memset>:
 8009294:	4402      	add	r2, r0
 8009296:	4603      	mov	r3, r0
 8009298:	4293      	cmp	r3, r2
 800929a:	d100      	bne.n	800929e <memset+0xa>
 800929c:	4770      	bx	lr
 800929e:	f803 1b01 	strb.w	r1, [r3], #1
 80092a2:	e7f9      	b.n	8009298 <memset+0x4>

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
